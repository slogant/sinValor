
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.xlogant.panel;

import com.digitalpersona.onetouch.DPFPDataPurpose;
import com.digitalpersona.onetouch.DPFPFeatureSet;
import com.digitalpersona.onetouch.DPFPFingerIndex;
import com.digitalpersona.onetouch.DPFPGlobal;
import com.digitalpersona.onetouch.DPFPSample;
import com.digitalpersona.onetouch.DPFPTemplate;
import com.digitalpersona.onetouch.capture.DPFPCapture;
import com.digitalpersona.onetouch.capture.event.DPFPDataAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPDataEvent;
import com.digitalpersona.onetouch.capture.event.DPFPErrorAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPErrorEvent;
import com.digitalpersona.onetouch.capture.event.DPFPReaderStatusAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPReaderStatusEvent;
import com.digitalpersona.onetouch.capture.event.DPFPSensorAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPSensorEvent;
import com.digitalpersona.onetouch.processing.DPFPEnrollment;
import com.digitalpersona.onetouch.processing.DPFPImageQualityException;
import com.xlogant.conecta.ControlaPuerto;
import com.xlogant.control.texto.JTextFieldLimit;
import com.xlogant.control.texto.LimitandorTexto;
import com.xlogant.controlador.ControlCrearUsuario;
import com.xlogant.customize.MiCombo;
import com.xlogant.customize.MiComboEditor;
import com.xlogant.emails.ValidarEmail;
import com.xlogant.filtro.FiltroImagenes;
import com.xlogant.huellas.Utilities;
import com.xlogant.principal.CentroPrincipal;
import com.xlogant.usuario.CrearUsuario;
import diu.swe.habib.JPanelSlider.JPanelSlider;

import java.awt.*;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.io.File;
import java.io.IOException;
import java.io.Serial;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.*;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

import static com.xlogant.emails.ValidarEmail.validaEmail;
import static java.awt.Toolkit.getDefaultToolkit;
import static java.lang.String.copyValueOf;
import static java.lang.String.valueOf;
import static java.lang.System.out;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import static javax.swing.JOptionPane.INFORMATION_MESSAGE;
import static javax.swing.JOptionPane.WARNING_MESSAGE;
import static javax.swing.JOptionPane.showInternalMessageDialog;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileFilter;
import jssc.SerialPort;
import jssc.SerialPortException;

/**
 *
 * @author oscar
 */
@SuppressWarnings("CallToPrintStackTrace")
public final class PanelCrearUsuario extends javax.swing.JPanel {

    /**
     * Creates new form PanelCrearUsuario
     */
    public PanelCrearUsuario() {
        initComponents();
        IniciaTodoelLector();
        accionesBotones();
        ActivaLosBotones();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        deslizaPanel = new diu.swe.habib.JPanelSlider.JPanelSlider();
        jPanel1 = new javax.swing.JPanel();
        textDirecPersona = new javax.swing.JTextField();
        javax.swing.JPanel jPanel2 = new javax.swing.JPanel();
        javax.swing.JLabel jLabel10 = new javax.swing.JLabel();
        textUsuario = new javax.swing.JTextField();
        javax.swing.JLabel jLabel11 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel12 = new javax.swing.JLabel();
        textClave = new javax.swing.JPasswordField();
        textClave2 = new javax.swing.JPasswordField();
        javax.swing.JLabel jLabel13 = new javax.swing.JLabel();
        estatusUsuario = new javax.swing.JComboBox<>();
        estatusUsuario.setRenderer(new MiCombo());
        estatusUsuario.setEditor(new MiComboEditor());
        javax.swing.JLabel jLabel14 = new javax.swing.JLabel();
        tipoUsuario = new javax.swing.JComboBox<>();
        javax.swing.JLabel jLabel18 = new javax.swing.JLabel();
        RF = new javax.swing.JTextField();
        javax.swing.JLabel jLabel17 = new javax.swing.JLabel();
        comboSerial = new javax.swing.JComboBox<>();
        leerPuerto = new javax.swing.JButton();
        correcto = new javax.swing.JLabel();
        textTelPersona = new javax.swing.JFormattedTextField();
        javax.swing.JLabel jLabel5 = new javax.swing.JLabel();
        controlIngreso = new org.jdesktop.swingx.JXDatePicker();
        javax.swing.JLabel jLabel6 = new javax.swing.JLabel();
        TextCelPer = new javax.swing.JFormattedTextField();
        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel7 = new javax.swing.JLabel();
        textNombrePersona = new javax.swing.JTextField();
        textMailpersona = new javax.swing.JTextField();
        javax.swing.JLabel jLabel2 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel8 = new javax.swing.JLabel();
        textApellidoPat = new javax.swing.JTextField();
        javax.swing.JLabel jLabel9 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel3 = new javax.swing.JLabel();
        textNumEmp = new javax.swing.JTextField();
        textApellidoMat = new javax.swing.JTextField();
        PanelDeFotografia = new javax.swing.JPanel();
        javax.swing.JLabel jLabel4 = new javax.swing.JLabel();
        fotografia = new javax.swing.JButton();
        cambio = new javax.swing.JButton();
        javax.swing.JLabel jLabel15 = new javax.swing.JLabel();
        nombreEmpresa = new javax.swing.JComboBox<>();
        javax.swing.JLabel jLabel16 = new javax.swing.JLabel();
        comboSucursal = new javax.swing.JComboBox<>();
        javax.swing.JLabel jLabel19 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        javax.swing.JPanel jPanel5 = new javax.swing.JPanel();
        etiHuella = new javax.swing.JLabel();
        panelHuellas = new javax.swing.JPanel();
        anuncio = new javax.swing.JLabel();
        totalHuellas = new javax.swing.JLabel();
        barraProgreso = new javax.swing.JProgressBar();
        initHuella = new javax.swing.JButton();
        rebootHuella = new javax.swing.JButton();
        regresar = new javax.swing.JButton();
        recolecta = new javax.swing.JButton();
        javax.swing.JPanel jPanel3 = new javax.swing.JPanel();
        panelDelMenuPrincipal = new javax.swing.JPanel();
        todosSeleccionados = new javax.swing.JCheckBox();
        javax.swing.JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
        panelSub = new javax.swing.JPanel();
        habilitando = new javax.swing.JCheckBox();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        textDirecPersona.setDocument(new JTextFieldLimit(50,false));
        textDirecPersona.setForeground(new java.awt.Color(51, 51, 255));
        textDirecPersona.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textDirecPersona.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        org.jdesktop.swingx.border.DropShadowBorder dropShadowBorder1 = new org.jdesktop.swingx.border.DropShadowBorder();
        dropShadowBorder1.setShadowColor(new java.awt.Color(0, 0, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createCompoundBorder(dropShadowBorder1, javax.swing.BorderFactory.createEtchedBorder()));
        jPanel2.setEnabled(false);

        jLabel10.setText("Nombre usuario: ");

        textUsuario.setDocument(new JTextFieldLimit(20, false));
        textUsuario.setForeground(new java.awt.Color(51, 51, 255));
        textUsuario.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textUsuario.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));
        textUsuario.setEnabled(false);

        jLabel11.setText("Clave: ");

        jLabel12.setText("Repetir clave: ");

        textClave.setDocument(new JTextFieldLimit(20, false));
        textClave.setForeground(new java.awt.Color(51, 51, 255));
        textClave.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textClave.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));
        textClave.setEnabled(false);

        textClave2.setDocument(new JTextFieldLimit(20, false));
        textClave2.setForeground(new java.awt.Color(51, 51, 255));
        textClave2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textClave2.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));
        textClave2.setEnabled(false);

        jLabel13.setText("Estatus usuario: ");

        estatusUsuario.setEnabled(false);

        jLabel14.setText("Tipo de usuario: ");

        tipoUsuario.setRenderer(new MiCombo());
        tipoUsuario.setEditor(new MiComboEditor());
        tipoUsuario.setEnabled(false);

        jLabel18.setText("# RFID: ");

        RF.setForeground(new java.awt.Color(0, 0, 204));
        RF.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        RF.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));

        jLabel17.setText("Seleccionar puerto: ");

        comboSerial.setEnabled(false);

        leerPuerto.setText("Empezar lectura");
        leerPuerto.setEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel18)
                    .addComponent(jLabel17)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(comboSerial, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(leerPuerto))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(RF, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(correcto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(textUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textClave, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textClave2, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(estatusUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tipoUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(comboSerial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(leerPuerto))
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(RF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(correcto, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel18))
                .addGap(9, 9, 9)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(textUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(textClave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(textClave2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(estatusUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14)
                    .addComponent(tipoUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(78, 78, 78))
        );

        textTelPersona.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));
        textTelPersona.setForeground(new java.awt.Color(51, 51, 255));
        try {
            textTelPersona.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##-##-##-##-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        textTelPersona.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel5.setText("Teléfono: ");

        controlIngreso.setForeground(new java.awt.Color(51, 51, 255));
        controlIngreso.setFont(new java.awt.Font("Dialog", Font.BOLD, 12)); // NOI18N

        jLabel6.setText("Celular: ");

        TextCelPer.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));
        TextCelPer.setForeground(new java.awt.Color(51, 51, 255));
        try {
            TextCelPer.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(###)##-##-##-##-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        TextCelPer.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel1.setText("Nombre: ");

        jLabel7.setText("email: ");

        textNombrePersona.setDocument(new LimitandorTexto(textNombrePersona,40));
        textNombrePersona.setForeground(new java.awt.Color(51, 51, 255));
        textNombrePersona.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textNombrePersona.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));

        textMailpersona.setDocument(new JTextFieldLimit(50, false));
        textMailpersona.setForeground(new java.awt.Color(51, 51, 255));
        textMailpersona.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textMailpersona.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));

        jLabel2.setText("Apellido Paterno: ");

        jLabel8.setText("Fecha de ingreso: ");

        textApellidoPat.setDocument(new LimitandorTexto(textApellidoPat, 40)
        );
        textApellidoPat.setForeground(new java.awt.Color(51, 51, 255));
        textApellidoPat.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textApellidoPat.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));

        jLabel9.setText("Número de emp: ");

        jLabel3.setText("Apellido Materno: ");

        textNumEmp.setDocument(new JTextFieldLimit(20, true));
        textNumEmp.setForeground(new java.awt.Color(51, 51, 255));
        textNumEmp.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textNumEmp.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));

        textApellidoMat.setDocument(new LimitandorTexto(textApellidoMat,40));
        textApellidoMat.setForeground(new java.awt.Color(51, 51, 255));
        textApellidoMat.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textApellidoMat.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));

        PanelDeFotografia.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        PanelDeFotografia.setEnabled(false);

        javax.swing.GroupLayout PanelDeFotografiaLayout = new javax.swing.GroupLayout(PanelDeFotografia);
        PanelDeFotografia.setLayout(PanelDeFotografiaLayout);
        PanelDeFotografiaLayout.setHorizontalGroup(
            PanelDeFotografiaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 252, Short.MAX_VALUE)
        );
        PanelDeFotografiaLayout.setVerticalGroup(
            PanelDeFotografiaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 299, Short.MAX_VALUE)
        );

        jLabel4.setText("Dirección: ");

        fotografia.setText("foto");
        fotografia.setEnabled(false);

        cambio.setText(">>");
        cambio.setEnabled(false);

        jLabel15.setText("Empresa: ");

        nombreEmpresa.setRenderer(new MiCombo());
        nombreEmpresa.setEditor(new MiComboEditor());

        jLabel16.setText("Sucursal: ");

        jLabel19.setIcon(new javax.swing.ImageIcon(Objects.requireNonNull(getClass().getResource("/com/xlogant/image/Fading_ lines.gif")))); // NOI18N
        jLabel19.setText("jLabel19");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(73, 73, 73)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel16)
                                    .addComponent(jLabel15)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textNombrePersona, javax.swing.GroupLayout.PREFERRED_SIZE, 447, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textApellidoPat, javax.swing.GroupLayout.PREFERRED_SIZE, 447, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textApellidoMat, javax.swing.GroupLayout.PREFERRED_SIZE, 447, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textDirecPersona, javax.swing.GroupLayout.PREFERRED_SIZE, 447, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TextCelPer, javax.swing.GroupLayout.PREFERRED_SIZE, 447, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textTelPersona, javax.swing.GroupLayout.PREFERRED_SIZE, 447, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(controlIngreso, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textNumEmp, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nombreEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textMailpersona, javax.swing.GroupLayout.PREFERRED_SIZE, 447, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(comboSucursal, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(fotografia))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 6, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PanelDeFotografia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(183, 183, 183)
                        .addComponent(cambio))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(jLabel19)))
                .addContainerGap(236, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(textNombrePersona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(textApellidoPat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textApellidoMat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textDirecPersona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textTelPersona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TextCelPer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textMailpersona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(controlIngreso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addGap(8, 8, 8)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textNumEmp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addGap(8, 8, 8)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15)
                            .addComponent(nombreEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel16)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(comboSucursal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(fotografia)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(69, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(PanelDeFotografia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62)
                        .addComponent(cambio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel19)
                        .addGap(109, 109, 109))))
        );

        deslizaPanel.add(jPanel1, "card2");

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Huella", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Dialog", Font.PLAIN, 11), new java.awt.Color(0, 51, 255))); // NOI18N
        jPanel5.setLayout(new java.awt.BorderLayout());
        jPanel5.add(etiHuella, java.awt.BorderLayout.CENTER);

        panelHuellas.setBackground(new java.awt.Color(255, 255, 255));
        panelHuellas.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        panelHuellas.setLayout(new java.awt.GridBagLayout());

        anuncio.setText("...");

        totalHuellas.setText("...");

        barraProgreso.setStringPainted(true);

        initHuella.setText("Leer huella");
        initHuella.setEnabled(false);

        rebootHuella.setText("Reiniciar huella");
        rebootHuella.setEnabled(false);

        regresar.setText("<<");

        recolecta.setText("Guardar");
        recolecta.setEnabled(false);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(regresar)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(anuncio, javax.swing.GroupLayout.PREFERRED_SIZE, 631, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(panelHuellas, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(totalHuellas, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                            .addComponent(initHuella)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(rebootHuella)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(recolecta))
                        .addComponent(barraProgreso, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 725, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(285, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(anuncio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(panelHuellas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(totalHuellas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(barraProgreso, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(initHuella)
                    .addComponent(rebootHuella)
                    .addComponent(recolecta))
                .addGap(31, 31, 31)
                .addComponent(regresar)
                .addContainerGap(84, Short.MAX_VALUE))
        );

        deslizaPanel.add(jPanel4, "card4");

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        panelDelMenuPrincipal.setLayout(new GridLayout(2, 2, 2, 2));
        panelDelMenuPrincipal.setBackground(new java.awt.Color(255, 255, 255));
        panelDelMenuPrincipal.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Menú", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.BOTTOM, new java.awt.Font("Dialog", Font.PLAIN, 11), new java.awt.Color(51, 51, 255))); // NOI18N

        todosSeleccionados.setBackground(new java.awt.Color(255, 255, 255));
        todosSeleccionados.setText("Seleccionar todo ");
        todosSeleccionados.setEnabled(false);

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1), javax.swing.BorderFactory.createTitledBorder(null, "Submenus", javax.swing.border.TitledBorder.RIGHT, javax.swing.border.TitledBorder.BOTTOM)));

        panelSub.setLayout(new GridLayout(10,5) );
        panelSub.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(panelSub);

        habilitando.setBackground(new java.awt.Color(255, 255, 255));
        habilitando.setText("Habilitar para selección");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panelDelMenuPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(habilitando)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(todosSeleccionados))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(368, 368, 368)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 796, Short.MAX_VALUE)))
                .addContainerGap(13, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(todosSeleccionados)
                    .addComponent(habilitando))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelDelMenuPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE)
                .addGap(43, 43, 43))
        );

        deslizaPanel.add(jPanel3, "card3");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(deslizaPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(deslizaPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void traeFotografia() {
        var selector = new JFileChooser();
        var seleccionado = selector.showOpenDialog(us);
        var filtro = List.of(
                new FiltroImagenes(".jpg", "Imágenes jpg"),
                new FiltroImagenes(".jpeg", "Imágenes jpeg"),
                new FiltroImagenes(".png", "Imágenes png"),
                new FiltroImagenes(".gif", "Imágenes gif"),
                new FiltroImagenes(".bmp", "Imágenes bmp")
        );
        filtro
                .stream()
                .sorted(Comparator.comparing(FiltroImagenes::getDescription))
                .forEach(f -> selector.addChoosableFileFilter((FileFilter) f));

        if (seleccionado == JFileChooser.APPROVE_OPTION) {
            try {
                File file = selector.getSelectedFile();
                selector.setCurrentDirectory(file);
                //La imagen del panel la almacene en un BufferedImage
                var imagen = ImageIO.read(file);
                //Cree una clase para almcenar la imagen y así poder cortarla
                panelUsuario = new PanelControlUsuario(imagen);
                PanelDeFotografia.removeAll();
                PanelDeFotografia.add(panelUsuario);
                PanelDeFotografia.repaint();
                PanelDeFotografia.revalidate();
                if (panelUsuario != null) {
                    if (validaDatosPersona()) {
                        showInternalMessageDialog(this, "Monitor", "todo activado...................", ERROR_MESSAGE);
                        //comboSerial.setEnabled(true);
                        textUsuario.setEnabled(true);
                        textClave.setEnabled(true);
                        textClave2.setEnabled(true);
                        estatusUsuario.setEnabled(true);
                        tipoUsuario.setEnabled(true);
                        comboSerial.requestFocus();
                        comboSerial.setEnabled(true);
                        comboSerial.setEditable(true);
                    }
                } else {
                    showInternalMessageDialog(this, "Ya a seleccionado una imágen", "Monitor", ERROR_MESSAGE);
                }
            } catch (IOException ex) {
                Logger.getLogger(panelRepresentante.class.getName()).log(Level.SEVERE, null, ex);
                System.err.println(ex.getLocalizedMessage());
                showInternalMessageDialog(this, ex.getLocalizedMessage(), "Error", WARNING_MESSAGE);
            }
        }
    }

    private boolean validaDatosPersona() {
        try {
            var nombrePersona = textNombrePersona.getText();
            var apellidoPatPer = textApellidoPat.getText();
            var apellidoMatPer = textApellidoMat.getText();
            var direccionPersona = textDirecPersona.getText();
            var telefPersona = (String) textTelPersona.getValue();
            var celPersona = (String) TextCelPer.getValue();
            var mailPersona = textMailpersona.getText();
            var ingresoUsuario = controlIngreso.getDate();
            var timedate = LocalDateTime.ofInstant(ingresoUsuario.toInstant(), ZoneId.systemDefault());
            var numEmp = textNumEmp.getText().trim();
            var emp = (String) nombreEmpresa.getSelectedItem();
            var sucur = (String) comboSucursal.getSelectedItem();
            var puertos = (String) comboSerial.getSelectedItem();
            var rd = RF.getText();
            if ("".equals(nombrePersona)) {
                showInternalMessageDialog(this, "El campo nombre esta vacío", "Monitor", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                textNombrePersona.requestFocus();
            } else if ("".equals(apellidoPatPer)) {
                showInternalMessageDialog(this, "El campo Apellido Paterno esta vacío", "Monitor", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                textApellidoPat.requestFocus();
            } else if ("".equals(apellidoMatPer)) {
                showInternalMessageDialog(this, "El campo Apellido Materno esta vacío", "Monitor", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                textApellidoMat.requestFocus();
            } else if ("".equals(direccionPersona)) {
                showInternalMessageDialog(this, "El campo dirección esta vacío", "Monitor", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                textDirecPersona.requestFocus();
            } else if ("".equals(mailPersona)) {
                showInternalMessageDialog(this, "El campo email esta vacío", "Monitor", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                textMailpersona.requestFocus();
            } else if (validaEmail(mailPersona)) {
                if ("".equals(numEmp)) {
                    showInternalMessageDialog(this, "El número de empleado esta vacío", "Monitor", ERROR_MESSAGE);
                    getDefaultToolkit().beep();
                    textNumEmp.requestFocus();
                } else if (ControlCrearUsuario.controlaNumeroEmp(numEmp)) {
                    showInternalMessageDialog(this, "El número de empleado es incorrecto", "Monitor", ERROR_MESSAGE);
                    getDefaultToolkit().beep();
                    textNumEmp.requestFocus();
                    textNumEmp.setSelectionStart(0);
                    textNumEmp.setSelectionEnd(textNumEmp.getText().length());
                    textNumEmp.setSelectionColor(Color.CYAN);
                } else if ("".equals(emp)) {
                    showInternalMessageDialog(this, "El campo empresa esta vacío", "Monitor", ERROR_MESSAGE);
                    getDefaultToolkit().beep();
                    nombreEmpresa.requestFocus();
                } else if ("".equals(sucur)) {
                    showInternalMessageDialog(this, "El número de empleado es incorrecto", "Monitor", ERROR_MESSAGE);
                    getDefaultToolkit().beep();
                    comboSucursal.requestFocus();
                } else if (panelUsuario == null) {
                    showInternalMessageDialog(this, "Monitor", "No hay foto", ERROR_MESSAGE);
                    fotografia.requestFocus();
                } else if ("".equals(puertos)) {
                    showInternalMessageDialog(this, "Monitor", "No ha seleccionado el puerto serial", ERROR_MESSAGE);
                    comboSerial.requestFocus();
                    comboSerial.setEnabled(true);
                } else if ("".equals(rd)) {
                    showInternalMessageDialog(this, "Monitor", "No ha colocado la tarjeta de indentificacion.", ERROR_MESSAGE);
                    RF.requestFocus();
                } else {
                    out.println("Datos completos");
                    return true;
                }
            } else {
                showInternalMessageDialog(this, "El campo es erroneo", "Monitor", ERROR_MESSAGE);
                textMailpersona.requestFocus();
            }
            out.println("Datos correctos...................");
        } catch (NullPointerException e) {
            showInternalMessageDialog(this, e.getLocalizedMessage(), "Monitor", ERROR_MESSAGE);
            controlIngreso.requestFocus();
            return false;
        }
        return false;
    }

    private void validandoDatosPersona() {
        try {
            var nombrePersona = textNombrePersona.getText();
            var apellidoPatPer = textApellidoPat.getText();
            var apellidoMatPer = textApellidoMat.getText();
            var direccionPersona = textDirecPersona.getText();
            var telefPersona = (String) textTelPersona.getValue();
            var celPersona = (String) TextCelPer.getValue();
            var mailPersona = textMailpersona.getText();
            var ingresoUsuario = controlIngreso.getDate();
            var timedate = LocalDateTime.ofInstant(ingresoUsuario.toInstant(), ZoneId.systemDefault());
            var numEmp = textNumEmp.getText().trim();
            var empre = (String) nombreEmpresa.getSelectedItem();
            var sucursal = (String) comboSucursal.getSelectedItem();
            var puertox = (String) comboSerial.getSelectedItem();
            if ("".equals(nombrePersona)) {
                showInternalMessageDialog(this, "El campo nombre esta vacío", "Monitor", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                textNombrePersona.requestFocus();
            } else if (ControlCrearUsuario.controlaNombre(nombrePersona)) {
                showInternalMessageDialog(this, "El nombre de usuario no es valido", "Monitor", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                textUsuario.requestFocus();
                textUsuario.setSelectionStart(0);
                textUsuario.setSelectionEnd(textUsuario.getText().length());
                textUsuario.setSelectionColor(Color.CYAN);
            } else if ("".equals(apellidoPatPer)) {
                showInternalMessageDialog(this, "El campo Apellido Paterno esta vacío", "Monitor", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                textApellidoPat.requestFocus();
            } else if ("".equals(apellidoMatPer)) {
                showInternalMessageDialog(this, "El campo Apellido Materno esta vacío", "Monitor", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                textApellidoMat.requestFocus();
            } else if ("".equals(direccionPersona)) {
                showInternalMessageDialog(this, "El campo dirección esta vacío", "Monitor", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                textDirecPersona.requestFocus();
            } else if ("".equals(mailPersona)) {
                showInternalMessageDialog(this, "El campo email esta vacío", "Monitor", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                textMailpersona.requestFocus();
            } else if ("".equals(numEmp)) {
                showInternalMessageDialog(this, "El número de empleado esta vacío", "Monitor", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                textNumEmp.requestFocus();
            } else if (ControlCrearUsuario.controlaNumeroEmp(numEmp)) {
                showInternalMessageDialog(this, "El número de empleado es incorrecto", "Monitor", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                textNumEmp.requestFocus();
                textNumEmp.setSelectionStart(0);
                textNumEmp.setSelectionEnd(textNumEmp.getText().length());
                textNumEmp.setSelectionColor(Color.CYAN);
            } else if ("".equals(sucursal)) {
                showInternalMessageDialog(this, "El número de empleado es incorrecto", "Monitor", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                comboSucursal.requestFocus();
            } else if ("".equals(empre)) {
                showInternalMessageDialog(this, "El campo sucursal esta vacío", "Monitor", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                nombreEmpresa.requestFocus();
            } else if (panelUsuario == null) {
                showInternalMessageDialog(this, "Monitor", "No hay foto", ERROR_MESSAGE);
                fotografia.requestFocus();
            } else {
                out.println("Datos completos");
                comboSerial.setEnabled(true);
                textUsuario.setEnabled(true);
                textClave.setEnabled(true);
                textClave2.setEnabled(true);
                estatusUsuario.setEnabled(true);
                tipoUsuario.setEnabled(true);
            }
        } catch (NullPointerException e) {
            showInternalMessageDialog(this, e.getLocalizedMessage(), "Monitor", ERROR_MESSAGE);
            controlIngreso.requestFocus();
        }
    }

    private boolean validandoCampos() {
        var rfrecuencia = RF.getText();
        var nombreUsua = textUsuario.getText();
        var pass1 = textClave.getPassword();
        var pass2 = textClave2.getPassword();
        var acti = (String) estatusUsuario.getSelectedItem();
        var tipo = (String) tipoUsuario.getSelectedItem();
        if ("".equals(nombreUsua)) {
            showInternalMessageDialog(this, "El campo nombre de usuario esta vacío", "Monitor", ERROR_MESSAGE);
            getDefaultToolkit().beep();
            textUsuario.requestFocus();
            return false;
        } else if (ControlCrearUsuario.controlaNombre(nombreUsua)) {
            showInternalMessageDialog(this, "El nombre de usuario no es valido", "Monitor", ERROR_MESSAGE);
            getDefaultToolkit().beep();
            textUsuario.requestFocus();
            textUsuario.requestFocus();
            textUsuario.setSelectionStart(0);
            textUsuario.setSelectionEnd(textUsuario.getText().length());
            textUsuario.setSelectionColor(Color.CYAN);
        } else if (pass1 == null) {
            showInternalMessageDialog(this, "El campo clave esta vacío", "Monitor", ERROR_MESSAGE);
            getDefaultToolkit().beep();
            textClave.requestFocus();
            return false;
        } else if (pass2 == null) {
            showInternalMessageDialog(this, "El campo clave de usuario esta vacío", "Monitor", ERROR_MESSAGE);
            getDefaultToolkit().beep();
            textClave2.requestFocus();
            return false;
        } else if (pass1.length != pass2.length && Arrays.equals(pass1, pass2)) {
            showInternalMessageDialog(this, "El campo clave no coinciden", "Monitor", ERROR_MESSAGE);
            getDefaultToolkit().beep();
            textClave.setText("");
            textClave2.setText("");
            textClave.requestFocus();
            return false;
        } else if ("".equals(acti)) {
            showInternalMessageDialog(this, "El campo estatus del usuario esta vacío", "Monitor", ERROR_MESSAGE);
            getDefaultToolkit().beep();
            estatusUsuario.requestFocus();
            return false;
        } else if ("".equals(tipo)) {
            showInternalMessageDialog(this, "El campo tipo de usuario esta vacío", "Monitor", ERROR_MESSAGE);
            getDefaultToolkit().beep();
            tipoUsuario.requestFocus();
            return false;
        } else {
            return true;
        }
        return false;
    }

    private void IniciaTodoelLector() {

        templates = new EnumMap<>(DPFPFingerIndex.class);
        checkBoxes = new EnumMap<>(DPFPFingerIndex.class);
        Lector = DPFPGlobal.getCaptureFactory().createCapture();
        Reclutador = DPFPGlobal.getEnrollmentFactory().createEnrollment();
        temp = new EnumMap<>(DPFPFingerIndex.class);
        EnumSet<DPFPFingerIndex> fingers = EnumSet.noneOf(DPFPFingerIndex.class);
        //fingers.addAll(templates.keySet());
        Lector.addDataListener(new DPFPDataAdapter() {
            @Override
            public void dataAcquired(final DPFPDataEvent e) {
                SwingUtilities.invokeLater(() -> {
                    // EnviarTexto("La Huella Digital ha sido Capturada");
                    anuncio.setText("La Huella Digital ha sido Capturada");
                    anuncio.setForeground(Color.blue);
                    ProcesarCaptura(e.getSample());
                });
            }
        });

        Lector.addReaderStatusListener(new DPFPReaderStatusAdapter() {
            @Override
            public void readerConnected(final DPFPReaderStatusEvent e) {
                SwingUtilities.invokeLater(() -> {
                    //EnviarTexto("El Sensor de Huella Digital esta Activado o Conectado");
                    anuncio.setText("El Sensor de Huella Digital esta Activado o Conectado");
                    anuncio.setForeground(Color.GREEN);
                });
            }

            @Override
            public void readerDisconnected(final DPFPReaderStatusEvent e) {
                SwingUtilities.invokeLater(() -> {
                    // EnviarTexto("El Sensor de Huella Digital esta Desactivado o no Conectado");
                    anuncio.setText("El Sensor de Huella Digital esta Desactivado o no Conectado");
                    anuncio.setForeground(Color.red);
                });
            }
        });

        Lector.addSensorListener(new DPFPSensorAdapter() {
            @Override
            public void fingerTouched(final DPFPSensorEvent e) {
                SwingUtilities.invokeLater(() -> {
                    //EnviarTexto("El dedo ha sido colocado sobre el Lector de Huella");
                    anuncio.setText("El dedo ha sido colocado sobre el Lector de Huella");
                    anuncio.setForeground(Color.darkGray);
                });
            }

            @Override
            public void fingerGone(final DPFPSensorEvent e) {
                SwingUtilities.invokeLater(() -> {
                    //EnviarTexto("El dedo ha sido quitado del Lector de Huella");
                    anuncio.setText("El dedo ha sido quitado del Lector de Huella");
                    anuncio.setForeground(Color.GRAY);
                });
            }
        });

        Lector.addErrorListener(new DPFPErrorAdapter() {
            public void errorReader(final DPFPErrorEvent e) {
                SwingUtilities.invokeLater(() -> {
                    //EnviarTexto("Error: " + e.getError());
                    anuncio.setText("Error: " + e.getError());
                    anuncio.setForeground(Color.MAGENTA);
                });
            }
        });

        Arrays.stream(DPFPFingerIndex.values())
                .forEach(s -> {
                    jCheckBox = new JCheckBox(Utilities.fingerName(s));
                    jCheckBox.setBackground(new Color(255, 255, 255));
                    var gridBagConstraints = new GridBagConstraints();
                    var rows = DPFPFingerIndex.values().length / 2;
                    gridBagConstraints.gridx = s.ordinal() / rows;
                    gridBagConstraints.gridy = rows - 1 - Math.abs(rows - 1 - s.ordinal()) + gridBagConstraints.gridx;
                    gridBagConstraints.anchor = GridBagConstraints.WEST;
                    panelHuellas.add(jCheckBox, gridBagConstraints);
                    checkBoxes.put(s, jCheckBox);
                    jCheckBox.addActionListener(e -> {
                        {
                            elIndex = s;
                        }
                        var cb = (JCheckBox) e.getSource();
                        if (cb.isSelected()) {
                            initHuella.setEnabled(true);
                            rebootHuella.setEnabled(false);
                            recolecta.setEnabled(false);
                            JOptionPane.showMessageDialog(PanelCrearUsuario.this,
                                    "To enroll the finger, click Enroll Fingerprints.", "Fingerprint Enrollment",
                                    JOptionPane.INFORMATION_MESSAGE);
                            out.println(elIndex + "------------------------------------------------>");
                        } else {
                            if (JOptionPane.showConfirmDialog(this,
                                    "Are you sure you want to delete the " + Utilities.fingerprintName(elIndex) + "?", "Fingerprint Enrollment",
                                    JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                                templates.remove(elIndex);
                            } else {
                                cb.setSelected(true);
                            }
                        }
                    });
                });
    }

    private Image CrearImagenHuella(DPFPSample sample) {
        return DPFPGlobal.getSampleConversionFactory().createImage(sample);
    }

    private void DibujarHuella(Image image) {
        etiHuella.setIcon(new ImageIcon(
                image.getScaledInstance(etiHuella.getWidth(), etiHuella.getHeight(), Image.SCALE_DEFAULT)));
        repaint();
        revalidate();
    }

    private DPFPFeatureSet extraerCaracteristicas(DPFPSample sample, DPFPDataPurpose purpose) {
        var extractor = DPFPGlobal.getFeatureExtractionFactory().createFeatureExtraction();
        try {
            return extractor.createFeatureSet(sample, purpose);
        } catch (DPFPImageQualityException e) {
            out.printf("Error al extraer las caracteristicas de la huella:%s%n ", e.getCaptureFeedback());
            return null;
        }
    }

    private void stop() {
        Lector.stopCapture();
        // EnviarTexto("No se está usando el Lector de Huella Dactilar ");
    }

    private DPFPTemplate getTemplate() {
        return template;
    }

    private void setTemplate(DPFPTemplate template) {
        var old = this.template;
        this.template = template;
        firePropertyChange(TEMPLATE_PROPERTY, old, template);
    }

    public void EstadoHuellas() {

        totalHuellas.setText("Número de huellas: " + Reclutador.getFeaturesNeeded());
        var barra = Reclutador.getFeaturesNeeded();
        out.println("----------------------> " + barra);
        switch (barra) {
            case 3 -> {
                templates.put(elIndex, Reclutador.getTemplate());
                out.println("###################################################_______>" + elIndex);
            }
            case 2 -> {
                templates.put(elIndex, Reclutador.getTemplate());
                out.println("###################################################_______>" + elIndex);
                barraProgreso.setValue(50);
            }
            case 1 -> {
                templates.put(elIndex, Reclutador.getTemplate());
                out.println("###################################################_______>" + elIndex);
                barraProgreso.setValue(75);
            }
            case 0 -> {
                templates.put(elIndex, Reclutador.getTemplate());
                out.println("###################################################_______>" + elIndex);
                barraProgreso.setValue(100);
                Lector.stopCapture();
                Reclutador.clear();
                initHuella.setEnabled(false);
                rebootHuella.setEnabled(true);
                recolecta.setEnabled(true);
            }
            default ->
                temp = templates;
        }
    }

    private void ProcesarCaptura(DPFPSample sample) {
        // Procesar la muestra de la huella y crear un conjunto de características con el propósito de inscripción.
        var featuresinscripcion = extraerCaracteristicas(sample, DPFPDataPurpose.DATA_PURPOSE_ENROLLMENT);
        // Procesar la muestra de la huella y crear un conjunto de características con el propósito de verificacion.
        var featuresverificacion = extraerCaracteristicas(sample, DPFPDataPurpose.DATA_PURPOSE_VERIFICATION);
        // Comprobar la calidad de la muestra de la huella y lo añade a su reclutador si es bueno
        if (featuresinscripcion != null) {
            try {
                out.println("Las Caracteristicas de la Huella han sido creada");
                Reclutador.addFeatures(featuresinscripcion);// Agregar las caracteristicas de la huella a la plantilla a crear
                // Dibuja la huella dactilar capturada.
                var image = CrearImagenHuella(sample);
                DibujarHuella(image);
            } catch (DPFPImageQualityException ex) {
                System.err.println("Error: " + ex.getMessage());
                showInternalMessageDialog(this, ex.getLocalizedMessage(), "Monitor", ERROR_MESSAGE);
            } finally {
                EstadoHuellas();
                // Comprueba si la plantilla se ha creado.
                switch (Reclutador.getTemplateStatus()) {
                    case TEMPLATE_STATUS_READY -> {
                        // informe de éxito y detiene  la captura de huellas
                        stop();
                        setTemplate(Reclutador.getTemplate());
                    }
                    case TEMPLATE_STATUS_FAILED -> {
                        // informe de fallas y reiniciar la captura de huellas
                        Reclutador.clear();
                        stop();
                        EstadoHuellas();
                        setTemplate(null);
                        JOptionPane.showMessageDialog(this, "La Plantilla de la Huella no pudo ser creada, Repita el Proceso", "Inscripcion de Huellas Dactilares", JOptionPane.ERROR_MESSAGE);
                        Lector.startCapture();
                    }
                    default -> {
                    }
                }
            }
        }
    }

    private void ActivaLosBotones() {
        initHuella.addActionListener(e -> {
            initHuella.setEnabled(false);
            rebootHuella.setEnabled(false);
            if (!Lector.isStarted()) {
                Lector.startCapture();
                rebootHuella.setEnabled(false);
                EstadoHuellas();
                barraProgreso.setValue(0);
                barraProgreso.repaint();
                barraProgreso.revalidate();
            }
            var y = Reclutador.getFeaturesNeeded();
            out.println("---fffffffff-------> " + y);

        });

        rebootHuella.addActionListener(e -> {
            barraProgreso.setValue(0);
            initHuella.setEnabled(true);
            rebootHuella.setEnabled(false);
            if (Lector.isStarted()) {
                Lector.stopCapture();
                Reclutador.clear();
                etiHuella.setIcon(null);
                EstadoHuellas();
            }
        });
    }

    private void accionesBotones() {
        textNombrePersona.setCaretPosition(0);
        ControlCrearUsuario
                .obtenerRoles()
                .entrySet()
                .stream()
                .sorted(Map.Entry.comparingByKey())
                .forEachOrdered(x -> {
                    out.println(x.getKey());
                    var usuarios = x.getKey();
                    tipoUsuario.addItem(usuarios);
                });
        var llenaRoles = ControlCrearUsuario.obtenerRoles();
        var llenaEmpresa = ControlCrearUsuario.listaEmpresaActiva(CentroPrincipal.unNombre);
        var listaSucursalesAct = ControlCrearUsuario.listaSucursales(CentroPrincipal.IDEMPRE);
        var llenar = ControlCrearUsuario.listaSubmenu();
        var usuarioActivo = new LinkedHashMap<String, Boolean>();
        usuarioActivo.put("Activo", true);
        usuarioActivo.put("Inactivo", false);
        estatusUsuario.removeAllItems();
        estatusUsuario.addItem("");
        usuarioActivo
                .forEach((x, z) -> estatusUsuario.addItem(x));
        tipoUsuario.removeAllItems();
        tipoUsuario.addItem("");
        llenaRoles
                .entrySet()
                .stream()
                //.filter(x -> !x.getKey().contains("Super Admin"))
                .sorted(Map.Entry.comparingByKey())
                .forEachOrdered(x -> {
                    out.println(x.getKey());
                    var usuarios = x.getKey();
                    tipoUsuario.addItem(usuarios);
                });

        /*llenaRoles.remove("Super Admin");
        llenaRoles.forEach((s, d) -> {
            tipoUsuario.addItem(s);
        });*/
        var llenarPanelMenu = ControlCrearUsuario.listaMenu();
        var lista1 = new LinkedList<JCheckBox>();
        llenarPanelMenu.forEach((ss, m) -> {
            lista1.add(new JCheckBox(ss));
            /*muestraMenus = new JCheckBox(ss);
             muestraMenus.setBackground(new Color(255, 255, 255));
             panelDelMenuPrincipal.add(muestraMenus);*/
        });
        lista1.forEach(er -> er.setEnabled(false));
        nombreEmpresa.removeAllItems();
        nombreEmpresa.addItem("");
        nombreEmpresa.repaint();
        llenaEmpresa.entrySet()
                .stream()
                .sorted(Map.Entry.comparingByKey())
                .forEachOrdered(x -> {
                    out.println(x.getKey());
                    nombreEmpresa.addItem(x.getKey());
                });
        /*llenaEmpresa.forEach((q, w) -> {
            nombreEmpresa.addItem(q);
        });*/
        comboSucursal.removeAllItems();
        comboSucursal.addItem("");
        comboSucursal.repaint();
        listaSucursalesAct.entrySet()
                .stream()
                .sorted(Map.Entry.comparingByKey())
                .forEachOrdered(x -> {
                    out.println(x.getKey());
                    comboSucursal.addItem(x.getKey());
                });
        /*listaSucursalesAct.forEach((n, m) -> {
            comboSucursal.addItem(n);

        });*/
        comboSucursal.repaint();
        comboSucursal.revalidate();
        comboSucursal.updateUI();
        List<String> seleccionLista = ControlaPuerto.MuestraPuertos();
        comboSerial.removeAllItems();
        comboSerial.addItem("");
        comboSerial.repaint();
        comboSerial.revalidate();
        seleccionLista
                .stream()
                .sorted()
                .forEachOrdered(x -> {
                    out.println(x);
                    comboSerial.addItem(x);
                });
        /*seleccionLista.forEach(s -> {
            comboSerial.addItem(s);
        });*/

        habilitando.addActionListener(e -> {
            if (habilitando.isSelected()) {
                todosSeleccionados.setEnabled(true);
                lista1
                        .forEach(er -> er.setEnabled(true));
            } else {
                todosSeleccionados.setEnabled(false);
                lista1
                        .forEach(er -> er.setEnabled(false));
            }
        });

        todosSeleccionados.addActionListener(e -> {
            if (todosSeleccionados.isSelected()) {
                lista1
                        .forEach(er -> er.setSelected(true));
            } else {
                lista1
                        .forEach(er -> er.setSelected(false));
            }
        });

        lista1
                .forEach(rt -> {
                    rt.setBackground(new Color(255, 255, 255));
                    panelDelMenuPrincipal.add(rt);
                });

        llenar.forEach((j, s) -> {
            cargaLosSubmenus = new JCheckBox(j);
            cargaLosSubmenus.setBackground(new Color(255, 255, 255));
            cargaLosSubmenus.addActionListener(e -> {
                var o = e.getSource();
                if (o instanceof JCheckBox) {
                    if (cargaLosSubmenus.isSelected()) {
                        var actionCommand = cargaLosSubmenus.getActionCommand();
                        out.println(actionCommand);
                        showInternalMessageDialog(this, actionCommand, "Monitor", ERROR_MESSAGE);
                    }
                } else {
                    out.println("errrrrrrrrrrrrrrrrrrrrrr");
                }
            });
            panelSub.add(cargaLosSubmenus);
        });

        textNombrePersona.addActionListener(e -> {
            var nombrePersona = textNombrePersona.getText();
            if ("".equals(nombrePersona)) {
                showInternalMessageDialog(this, "El campo nombre esta vacío", "Monitor", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                textNombrePersona.requestFocus();
            } else {
                ((JComponent) e.getSource()).transferFocus();
            }
        });

        textApellidoPat.addActionListener(e -> {
            var apellidoPatPer = textApellidoPat.getText();
            if ("".equals(apellidoPatPer)) {
                showInternalMessageDialog(this, "El campo Apellido Paterno esta vacío", "Monitor", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                textApellidoPat.requestFocus();
            } else {
                ((JComponent) e.getSource()).transferFocus();
            }
        });

        textApellidoMat.addActionListener(e -> {
            var apellidoMatPer = textApellidoMat.getText();
            if ("".equals(apellidoMatPer)) {
                showInternalMessageDialog(this, "El campo Apellido Materno esta vacío", "Monitor", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                textApellidoMat.requestFocus();
            } else {
                ((JComponent) e.getSource()).transferFocus();
            }
        });

        textDirecPersona.addActionListener(e -> {
            var direccionPersona = textDirecPersona.getText();
            if ("".equals(direccionPersona)) {
                showInternalMessageDialog(this, "El campo dirección esta vacío", "Monitor", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                textDirecPersona.requestFocus();
            } else {
                ((JComponent) e.getSource()).transferFocus();
            }
        });

        textTelPersona.addActionListener(e -> ((JComponent) e.getSource()).transferFocus());

        TextCelPer.addActionListener(e -> ((JComponent) e.getSource()).transferFocus());

        textMailpersona.addActionListener(e -> {
            var mailPersona = textMailpersona.getText();
            if ("".equals(mailPersona)) {
                showInternalMessageDialog(this, "El campo email esta vacío", "Monitor", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                textMailpersona.requestFocus();
            } else if (validaEmail(mailPersona)) {
                ((JComponent) e.getSource()).transferFocus();
            } else {
                showInternalMessageDialog(this, "Es erroneo el campo mail", "Monitor", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                textMailpersona.requestFocus();
                textMailpersona.setSelectionStart(0);
                textMailpersona.setSelectionEnd(textMailpersona.getText().length());
                textMailpersona.setSelectionColor(Color.CYAN);
            }
        });

        textNumEmp.addActionListener(e -> {
            var numEmp = textNumEmp.getText().trim();
            if ("".equals(numEmp)) {
                showInternalMessageDialog(this, "El número de empleado esta vacío", "Monitor", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                textNumEmp.requestFocus();
            } else if (ControlCrearUsuario.controlaNumeroEmp(numEmp)) {
                showInternalMessageDialog(this, "El número de empleado es incorrecto", "Monitor", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                textNumEmp.requestFocus();
                textNumEmp.setSelectionStart(0);
                textNumEmp.setSelectionEnd(textNumEmp.getText().length());
                textNumEmp.setSelectionColor(Color.CYAN);
            } else {
                ((JComponent) e.getSource()).transferFocus();
            }
        });

        nombreEmpresa.addActionListener(e -> {
            var empresa = (String) nombreEmpresa.getSelectedItem();
            if ("".equals(empresa)) {
                showInternalMessageDialog(this, "El campo empresa esta vacío", "Monitor", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                nombreEmpresa.requestFocus();
                nombreEmpresa.setSelectedIndex(1);
            } else {
                ((JComponent) e.getSource()).transferFocus();
            }
        });

        comboSucursal.addActionListener(e -> {
            var sucursales = (String) comboSucursal.getSelectedItem();
            if ("".equals(sucursales)) {
                showInternalMessageDialog(this, "El campo surusal esta vacío", "Monitor", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                comboSucursal.requestFocus();
            } else {
                fotografia.setEnabled(true);
                ((JComponent) e.getSource()).transferFocus();
            }
        });

        controlIngreso.addActionListener(e -> {
            var fecha = controlIngreso.getDate();
            if (fecha == null) {
                showInternalMessageDialog(this, "El campo fecha esta vacío", "Monitor", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                controlIngreso.requestFocus();
            } else {
                ((JComponent) e.getSource()).transferFocus();
                textNumEmp.requestFocus();
            }
        });

        fotografia.addActionListener(e -> traeFotografia());

        comboSerial.addActionListener(e -> seleccionaPuerto());

        textUsuario.addActionListener(e -> {
            var nombreUsuario = textUsuario.getText().trim();
            if ("".equals(nombreUsuario)) {
                showInternalMessageDialog(this, "El campo nombre usuario esta vacío", "Monitor", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                textUsuario.requestFocus();
            } else if (ControlCrearUsuario.controlaNombre(nombreUsuario)) {
                showInternalMessageDialog(this, "El nombre de usuario no es valido.\nIntente con otro por favor.", "Monitor", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                textUsuario.requestFocus();
                textUsuario.setSelectionStart(0);
                textUsuario.setSelectionEnd(textUsuario.getText().length());
                textUsuario.setSelectionColor(Color.CYAN);
            } else {
                ((JComponent) e.getSource()).transferFocus();
            }
        });

        textClave.addActionListener(e -> {
            var laclave = textClave.getPassword();
            if (laclave.length == 0) {
                showInternalMessageDialog(this, "El campo clave de usuario esta vacío", "Monitor", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                textClave.requestFocus();
            } else if (laclave.length <= 11) {
                showInternalMessageDialog(this, "El campo clave debe tener al menos 12 caracteres", "Monitor", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                textClave.requestFocus();
                textClave.setText("");
            } else {
                ((JComponent) e.getSource()).transferFocus();
            }
        });

        textClave2.addActionListener(e -> {
            var clave1 = textClave.getPassword();
            var clave2 = textClave2.getPassword();
            if (clave2.length == 0) {
                showInternalMessageDialog(this, "El campo clave de usuario esta vacío", "Monitor", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                textClave2.requestFocus();
            } else if (clave2.length <= 11) {
                showInternalMessageDialog(this, "El campo clave debe tener al menos12 caracteres", "Monitor", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                textClave2.requestFocus();
                textClave2.setText("");
            } else if (Arrays.equals(clave2, clave1)) {
                out.println("Claves iguales");
                getDefaultToolkit().beep();
                ((JComponent) e.getSource()).transferFocus();
            } else {
                showInternalMessageDialog(this, "Las claves no son iguales", "Monitor", ERROR_MESSAGE);
                textClave.setText("");
                textClave2.setText("");
                textClave.requestFocus();
            }
        });

        estatusUsuario.addActionListener(e -> {
            var campo = (String) estatusUsuario.getSelectedItem();
            if ("".equals(campo)) {
                showInternalMessageDialog(this, "El campo estado esta vacío", "Monitor", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                estatusUsuario.requestFocus();
                estatusUsuario.setSelectedIndex(2);
            } else {
                ((JComponent) e.getSource()).transferFocus();
            }
        });

        tipoUsuario.addActionListener(e -> {
            var campo2 = (String) tipoUsuario.getSelectedItem();
            
            if ("".equals(campo2)) {
                showInternalMessageDialog(this, "El campo tipo de usuario esta vacío", "Monitor", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                tipoUsuario.requestFocus();
                tipoUsuario.setSelectedIndex(8);
            } else {
                cambio.setEnabled(true);
                recolecta.setEnabled(false);
                ((JComponent) e.getSource()).transferFocus();
            }
        });

        leerPuerto.addActionListener(e -> abrePuerto());

        RF.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent e) {
                var campo = RF.getText();
                if (!"".equals(campo)) {
                    textUsuario.requestFocus();
                    textUsuario.setEnabled(true);
                    textUsuario.requestFocus();
                    textClave.setEnabled(true);
                    textClave2.setEnabled(true);
                    estatusUsuario.setEnabled(true);
                    tipoUsuario.setEnabled(true);
                }
            }

            @Override
            public void focusLost(FocusEvent e) {
            }
        });

        RF.addActionListener(e -> {
            var radiofrecuencia = RF.getText();
            if ("".equals(radiofrecuencia)) {
                showInternalMessageDialog(this, "El campo número de Radio Frecuencia esta vacío", "Monitor", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                RF.requestFocus();
            } else {
                //((JComponent) e.getSource()).transferFocus();
                RF.setEnabled(false);
                textUsuario.setEnabled(true);
                textUsuario.requestFocus();
                textClave.setEnabled(true);
                textClave2.setEnabled(true);
                estatusUsuario.setEnabled(true);
                tipoUsuario.setEnabled(true);
                if (elPuertoAbierto.isOpened()) {
                    ControlaPuerto.cerrarPuerto(elPuertoAbierto);
                } else {
                    out.println("El puerto ya esta cerrado el puerto....");
                }
            }
        });

        recolecta.addActionListener(e -> {
            try {
                var nombrePersona = textNombrePersona.getText();
                var apellidoPatPer = textApellidoPat.getText();
                var apellidoMatPer = textApellidoMat.getText();
                var direccionPersona = textDirecPersona.getText();
                var telefPersona = (String) textTelPersona.getValue();
                var celPersona = (String) TextCelPer.getValue();
                var mailPersona = textMailpersona.getText();
                var ingresoUsuario = controlIngreso.getDate();
                var timedate = LocalDateTime.ofInstant(ingresoUsuario.toInstant(), ZoneId.systemDefault());
                var numEmp = textNumEmp.getText().trim();
                var imagenBuffer = panelUsuario.devuelveImagen();
                var nombreUsua = textUsuario.getText();
                var pass1 = textClave.getPassword();
                var CargaClave = copyValueOf(pass1);
                var pass = valueOf(pass1).trim();
                var estadoUsuario = usuarioActivo.get(valueOf(estatusUsuario.getSelectedItem()));
                var ids_roles = llenaRoles.get(valueOf(tipoUsuario.getSelectedItem()));
                var id_emp = llenaEmpresa.get(valueOf(nombreEmpresa.getSelectedItem()));
                var id_suc = llenaSucursales.get(valueOf(comboSucursal.getSelectedItem()));
                var rfid = RF.getText();
                //JOptionPane.showConfirmDialog(this, id_suc, "Monitor", JOptionPane.INFORMATION_MESSAGE);
                if (validaDatosPersona()) {
                    out.println("paso1 cumplido");
                    if (validandoCampos()) {
                        out.println("paso 2 cump");
                        ControlCrearUsuario.guardaEnBase(nombrePersona, apellidoPatPer, apellidoMatPer, direccionPersona,
                                telefPersona, celPersona, mailPersona, timedate, numEmp, id_emp,
                                imagenBuffer, nombreUsua, pass, estadoUsuario, ids_roles, id_suc, temp, rfid);
                        showInternalMessageDialog(this, "Datos agregados correctamente", "Monitor", INFORMATION_MESSAGE);
                        limpia();
                    } else {
                        out.println("campos vacios");
                    }
                } else {
                    out.println("No se pudieron validar los datos");
                }
            } catch (NullPointerException ex) {
                showInternalMessageDialog(this, "El campo fecha ingreso esta vacío", "Monitor", ERROR_MESSAGE);
                out.println(ex.getLocalizedMessage());
                controlIngreso.requestFocus();
            }
        });

        cambio.addActionListener(e -> {
            deslizaPanel.nextPanel(20, 10, jPanel4, JPanelSlider.left);
            deslizaPanel.repaint();
            deslizaPanel.revalidate();
            deslizaPanel.refresh();
        });

        regresar.addActionListener(e -> {
            deslizaPanel.nextPanel(20, 10, jPanel1, JPanelSlider.right);
            deslizaPanel.repaint();
            deslizaPanel.revalidate();
            deslizaPanel.refresh();
        });
    }

    private void seleccionaPuerto() {
        var campo = (String) comboSerial.getSelectedItem();
        if ("".equals(campo)) {
            showInternalMessageDialog(this, "No ha seleccionado el puerto", "Monitor", ERROR_MESSAGE);
            comboSerial.requestFocus();
            comboSerial.setSelectedIndex(1);
        } else {
            out.println("Puerto seleccionado");
            leerPuerto.requestFocus();
            leerPuerto.setEnabled(true);
        }
    }

    private void abrePuerto() {
        var numPort = (String) comboSerial.getSelectedItem();
        if (Objects.requireNonNull(numPort).isEmpty()) {
            showInternalMessageDialog(this, "No ha seleccionado el puerto", "Monitor", ERROR_MESSAGE);
            comboSerial.requestFocus();
            comboSerial.setSelectedIndex(1);
        } else {
            if (!numPort.isEmpty()) {
                elPuertoAbierto = ControlaPuerto.abrePuerto(numPort);
                out.println("El puerto esta abierto");
                if (elPuertoAbierto.isOpened()) {
                    comboSerial.setEnabled(false);
                    leerPuerto.setEnabled(false);
                }
                try {
                    elPuertoAbierto.addEventListener(new ControlaPuerto(RF, leerPuerto, comboSerial, correcto), SerialPort.MASK_RXCHAR);
                } catch (SerialPortException ex) {
                    Logger.getLogger(PanelCrearUsuario.class.getName()).log(Level.SEVERE, null, ex);
                    showInternalMessageDialog(this, ex.getLocalizedMessage(), "Monitor", ERROR_MESSAGE);
                }
            } else {
                showInternalMessageDialog(this, "No ha seleccionado el puerto", "Monitor", ERROR_MESSAGE);
                out.println("El puerto no se ha seleccionado");
            }
        }
    }

    /**
     * * Método para detectar cuando llego un dato al puerto serial
     *
     **
     * @param event
     */
    /*@Override
     public void serialEvent(SerialPortEvent event) {

     if (event.isRXCHAR() && (event.getEventValue() >= 17)) {
     try {
     LocalDateTime ldt = LocalDateTime.now();
     Timestamp tiempo = Timestamp.valueOf(ldt);
     StringBuilder n = new StringBuilder();
     StringBuilder sb = new StringBuilder();//Variable para almacenar String del puerto
     sb.append(elPuertoAbierto.readString(event.getEventValue()));//Almaceno el String que me envia el puerto
     String se = (String) sb.substring(0, sb.length() - 1);//Le quito un caracter que no nececito
     System.out.println(se);
     String[] palabras = se.split("^[A-Za-z_0-9]*");//Elimino caracteres especiales
     for (String t : palabras) {
     System.out.println(t);
     n.append(t);//LO almaceno en una nueva variable
     }
     String yo = n.toString().trim();//Covierto la variable n a String
     RF.requestFocus();
     RF.setText(yo);
     RF.setForeground(new Color(45, 20, 245));
     if (!yo.isEmpty()) {
     sb.append("");
     sb.setLength(0);
     leerPuerto.setEnabled(false);
     comboSerial.setEnabled(false);
     }
     } catch (SerialPortException ex) {
     Logger.getLogger(PanelCrearUsuario.class.getName()).log(Level.SEVERE, null, ex);
     System.out.println("error: -> " + ex.getLocalizedMessage());
     }*/
 /*cone  = Conectado.obtenerConexion();
    pstm  = cone.prepareStatement(sentencia);
    ps  = cone.prepareStatement(controla);
    Runnable task2 = () -> {
        try {
            //Cadena a comparar
            StringBuilder n = new StringBuilder();
            StringBuilder sb = new StringBuilder();//Variable para almacenar String del puerto
            sb.append(serialPort.readString(event.getEventValue()));//Almaceno el String que me envia el puerto
            String se = (String) sb.substring(0, sb.length() - 1);//Le quito un caracter que no nececito
            System.out.println(se);
            String[] palabras = se.split("^[A-Za-z_0-9]*");//Elimino caracteres especiales
            for (String t : palabras) {
                System.out.println(t);
                n.append(t);//LO almaceno en una nueva variable
            }
            String yo = n.toString().trim();//Covierto la variable n a String
            boolean g = yo.equals(NUM);//Intento comparar los String
            RF.setText(yo);
            System.out.println(yo.length());//Checo que se ha igual de tamaño
            System.out.println(NUM.length());
            System.out.println(g);
            //Comparo mi variable yo con
            if (yo.equals(NUM)) {
                jTextArea1.append("Encontrada\n");
            } else {
                jTextArea1.append("No registrada\n");
            }
            pstm.setString(1, yo);
            res = pstm.executeQuery();
            while (res.next()) {
                String ya = res.getString(1);
                if (ya != null) {
                    eti.setText(ya);
                    jTextArea1.append("Entrada\n");
                    ps.setString(1, ya);
                    ps.setString(2, yo);
                    ps.setTimestamp(3, tiempo);
                    colocado = ps.executeUpdate();
                    if (colocado == 1) {
                        System.out.println("Datos grabados en la base...............");
                    } else {
                        System.out.println("Los datos no se grabaron en la base de datos....................");
                    }
                } else {
                    eti.setText("No se encontrol registro............");
                }

            }
            Thread.sleep(1000);
            jTextArea1.setText("");
            sb.append("");
            sb.setLength(0);
            RF.setText("");
            Nom.setText("");
            eti.setText("");

        } catch (SerialPortException | InterruptedException | SQLException ex) {
            Logger.getLogger(Control.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("error: -> " + ex.getLocalizedMessage());
        } finally {
            if (cone != null) {
                Conectado.cerrarConexion(cone);
                boolean ty = tarea.isAlive();
                if (tarea.isAlive()) {
                    System.out.println("Tarea terminada..." + ty);
                    tarea.interrupt();
                    if (tarea.isInterrupted()) {
                        System.out.println("La tarea se ha terminado...");
                    }
                }
            }
        }
    };
    tarea  = new Thread(task2);
    tarea.start ();
}


catch (SQLException ex) {
     Logger.getLogger(Control.class  

    .getName()).log(Level.SEVERE, null, ex);
    System.out.println (

"El error es: -> " + ex.getLocalizedMessage());
     } */
 /* }
     }*/
    private void limpia() {
        try {
            textNombrePersona.setText("");
            textApellidoPat.setText("");
            textApellidoMat.setText("");
            textDirecPersona.setText("");
            textTelPersona.setText("");
            TextCelPer.setText("");
            textMailpersona.setText("");
            controlIngreso.setDate(new Date());
            textNumEmp.setText("");
            nombreEmpresa.setSelectedIndex(0);
            fotografia.setEnabled(false);
            textUsuario.setText("");
            textClave.setText("");
            textClave2.setText("");
            estatusUsuario.setSelectedIndex(0);
            tipoUsuario.setSelectedIndex(0);
            recolecta.setEnabled(false);
            PanelDeFotografia.removeAll();
            PanelDeFotografia.repaint();
            PanelDeFotografia.revalidate();
            PanelDeFotografia.updateUI();
            textNombrePersona.requestFocus();
            initHuella.setEnabled(false);
            rebootHuella.setEnabled(false);
            recolecta.setEnabled(false);
            etiHuella.setIcon(null);
            regresar.setEnabled(false);
            panelHuellas.removeAll();
            panelHuellas.repaint();
            panelHuellas.revalidate();
            panelHuellas.updateUI();
            if (elPuertoAbierto.isOpened()) {
                elPuertoAbierto.closePort();
                out.println("Se cerro el puerto correctamente.");
            } else {
                out.println("No se logro cerrar el puerto");
            }
        } catch (SerialPortException ex) {
            Logger.getLogger(PanelCrearUsuario.class
                    .getName()).log(Level.SEVERE, null, ex);
            out.println(
                    "El error es: -> " + ex.getLocalizedMessage());
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JPanel PanelDeFotografia;
    private javax.swing.JTextField RF;
    private javax.swing.JFormattedTextField TextCelPer;
    private javax.swing.JLabel anuncio;
    private javax.swing.JProgressBar barraProgreso;
    private javax.swing.JButton cambio;
    /*
    private javax.swing.JComboBox comboSerial;
    */
    private javax.swing.JComboBox<String> comboSerial;
    /*
    private javax.swing.JComboBox comboSucursal;
    */
    private javax.swing.JComboBox<String> comboSucursal;
    private org.jdesktop.swingx.JXDatePicker controlIngreso;
    private javax.swing.JLabel correcto;
    private diu.swe.habib.JPanelSlider.JPanelSlider deslizaPanel;
    /*
    private javax.swing.JComboBox estatusUsuario;
    */
    private javax.swing.JComboBox<String> estatusUsuario;
    private javax.swing.JLabel etiHuella;
    private javax.swing.JButton fotografia;
    private javax.swing.JCheckBox habilitando;
    private javax.swing.JButton initHuella;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JButton leerPuerto;
    /*
    private javax.swing.JComboBox nombreEmpresa;
    */
    private javax.swing.JComboBox<String> nombreEmpresa;
    private javax.swing.JPanel panelDelMenuPrincipal;
    private javax.swing.JPanel panelHuellas;
    private javax.swing.JPanel panelSub;
    private javax.swing.JButton rebootHuella;
    private javax.swing.JButton recolecta;
    private javax.swing.JButton regresar;
    private javax.swing.JTextField textApellidoMat;
    private javax.swing.JTextField textApellidoPat;
    private javax.swing.JPasswordField textClave;
    private javax.swing.JPasswordField textClave2;
    private javax.swing.JTextField textDirecPersona;
    private javax.swing.JTextField textMailpersona;
    private javax.swing.JTextField textNombrePersona;
    private javax.swing.JTextField textNumEmp;
    private javax.swing.JFormattedTextField textTelPersona;
    private javax.swing.JTextField textUsuario;
    /*
    private javax.swing.JComboBox tipoUsuario;
    */
    private javax.swing.JComboBox<String> tipoUsuario;
    private javax.swing.JCheckBox todosSeleccionados;
    private javax.swing.JLabel totalHuellas;
    // End of variables declaration//GEN-END:variables

    @Serial
    private static final long serialVersionUID = 3579552441465116448L;
    private PanelControlUsuario panelUsuario;
    private int sucs;
    private JCheckBox muestraMenus, cargaLosSubmenus;
    private JCheckBox jCheckBox;
    private static String NombreIngreso;
    private static Map<String, Integer> llenaSucursales, otraInformacion;
    private EnumMap<DPFPFingerIndex, DPFPTemplate> templates;
    private EnumMap<DPFPFingerIndex, JCheckBox> checkBoxes;
    private DPFPCapture Lector;
    private DPFPEnrollment Reclutador;
    private DPFPTemplate template;
    private final static String TEMPLATE_PROPERTY = "template";
    private DPFPFingerIndex elIndex;
    private EnumMap<DPFPFingerIndex, DPFPTemplate> temp;
    private static final DPFPTemplate FAKETEMPLATE;
    private SerialPort elPuertoAbierto;
    private  CrearUsuario us;

    static {
        FAKETEMPLATE = DPFPGlobal.getTemplateFactory().createTemplate();
        try {
            FAKETEMPLATE.deserialize(new byte[0]);
        } catch (IllegalArgumentException e) {
            out.println(e.getLocalizedMessage());
        }
    }
}
