/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.xlogant.panel;

import com.digitalpersona.onetouch.DPFPDataPurpose;
import com.digitalpersona.onetouch.DPFPFeatureSet;
import com.digitalpersona.onetouch.DPFPFingerIndex;
import com.digitalpersona.onetouch.DPFPGlobal;
import com.digitalpersona.onetouch.DPFPSample;
import com.digitalpersona.onetouch.DPFPTemplate;
import com.digitalpersona.onetouch.capture.DPFPCapture;
import com.digitalpersona.onetouch.capture.event.DPFPDataAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPDataEvent;
import com.digitalpersona.onetouch.capture.event.DPFPErrorAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPErrorEvent;
import com.digitalpersona.onetouch.capture.event.DPFPReaderStatusAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPReaderStatusEvent;
import com.digitalpersona.onetouch.capture.event.DPFPSensorAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPSensorEvent;
import com.digitalpersona.onetouch.processing.DPFPEnrollment;
import com.digitalpersona.onetouch.processing.DPFPImageQualityException;
import com.xlogant.acciones.EscuchaPuerto;
import com.xlogant.cambio.DatosPersonal;
import com.xlogant.conecta.ControlaPuerto;
import com.xlogant.control.texto.JTextFieldLimit;
import com.xlogant.control.texto.LimitandorTexto;
import com.xlogant.controlador.ControlCrearUsuario;
import com.xlogant.controlador.ControladorDatosUsuario;
import com.xlogant.controlador.ValorandoHuellas;
import com.xlogant.encripta.EncriptaGenerador;
import com.xlogant.huellas.Utilities;
import com.xlogant.principal.CentroPrincipal;

import java.awt.*;
import java.io.Serial;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import static javax.swing.JOptionPane.INFORMATION_MESSAGE;
import static javax.swing.JOptionPane.showInternalMessageDialog;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.SwingUtilities;
import jssc.SerialPort;
import jssc.SerialPortException;

/**
 *
 * @author oscar
 */
@SuppressWarnings("CallToPrintStackTrace")
public final class PBYMUsuario extends JPanel {

    final static private DPFPTemplate FAKETEMPLATE;

    static {
        FAKETEMPLATE = DPFPGlobal.getTemplateFactory().createTemplate();
        try {
            FAKETEMPLATE.deserialize(new byte[0]);
        } catch (IllegalArgumentException e) {
            System.out.println("Error en huella: " + e.getLocalizedMessage());
        }
    }

    /**
     * Creates new form PBYMUsuario
     */
    public PBYMUsuario() {
        initComponents();
        estableceInicio();
        IniciaTodoelLector();
        ActivaLosBotones();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        // Variables declaration - do not modify//GEN-BEGIN:variables
        javax.swing.ButtonGroup migrupo = new javax.swing.ButtonGroup();
        javax.swing.JLabel jLabel11 = new javax.swing.JLabel();
        javax.swing.JSeparator jSeparator1 = new javax.swing.JSeparator();
        javax.swing.JLabel jLabel13 = new javax.swing.JLabel();
        NumRadio = new javax.swing.JRadioButton();
        Numrfid = new javax.swing.JRadioButton();
        javax.swing.JLabel jLabel14 = new javax.swing.JLabel();
        miComboRF = new javax.swing.JComboBox<>();
        lecturaRF = new javax.swing.JButton();
        buscando = new javax.swing.JButton();
        miBusqueda = new javax.swing.JButton();
        panelHuella = new javax.swing.JPanel();
        numEmp = new javax.swing.JTextField();
        numref = new javax.swing.JTextField();
        JPanel jPanel1 = new JPanel();
        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        textNombrePersona = new javax.swing.JTextField();
        javax.swing.JLabel jLabel2 = new javax.swing.JLabel();
        textApellidoPat = new javax.swing.JTextField();
        textApellidoMat = new javax.swing.JTextField();
        javax.swing.JLabel jLabel3 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel4 = new javax.swing.JLabel();
        textDirecPersona = new javax.swing.JTextField();
        textTelPersona = new javax.swing.JFormattedTextField();
        javax.swing.JLabel jLabel5 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel6 = new javax.swing.JLabel();
        TextCelPer = new javax.swing.JFormattedTextField();
        textMailpersona = new javax.swing.JTextField();
        javax.swing.JLabel jLabel7 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel8 = new javax.swing.JLabel();
        textoFecha = new javax.swing.JTextField();
        textNumEmp = new javax.swing.JTextField();
        javax.swing.JLabel jLabel9 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel12 = new javax.swing.JLabel();
        textSucursal = new javax.swing.JTextField();
        javax.swing.JLabel jLabel16 = new javax.swing.JLabel();
        controlTipo = new javax.swing.JTextField();
        TextoEstado = new javax.swing.JTextField();
        javax.swing.JLabel jLabel15 = new javax.swing.JLabel();
        modificaDatosPer = new javax.swing.JCheckBox();
        javax.swing.JLabel jLabel27 = new javax.swing.JLabel();
        tipodePerfil = new javax.swing.JComboBox<>();
        javax.swing.JLabel jLabel29 = new javax.swing.JLabel();
        comboSuc = new javax.swing.JComboBox<>();
        comboUs = new javax.swing.JComboBox<>();
        javax.swing.JLabel jLabel25 = new javax.swing.JLabel();
        campoFecha = new org.jdesktop.swingx.JXDatePicker();
        javax.swing.JLabel jLabel28 = new javax.swing.JLabel();
        JPanel jPanel2 = new JPanel();
        javax.swing.JLabel jLabel22 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel19 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel20 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel21 = new javax.swing.JLabel();
        passwdNuevo2 = new javax.swing.JPasswordField();
        paswdNuevo = new javax.swing.JPasswordField();
        passwordOriginal = new javax.swing.JPasswordField();
        nombreUs = new javax.swing.JTextField();
        checkPass = new javax.swing.JCheckBox();
        recolecta = new javax.swing.JButton();
        JPanel panelBlanco2 = new JPanel();
        etiHuella = new javax.swing.JLabel();
        JPanel panelRojo3 = new JPanel();
        cambiarHuella = new javax.swing.JCheckBox();
        progresoHuella = new javax.swing.JProgressBar();
        capturandoHuella = new javax.swing.JButton();
        detenerLectura = new javax.swing.JButton();
        javax.swing.JLabel jLabel10 = new javax.swing.JLabel();
        capturaHuellas = new javax.swing.JLabel();
        javax.swing.JLabel jLabel17 = new javax.swing.JLabel();
        anuncio = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel11.setIcon(new javax.swing.ImageIcon(Objects.requireNonNull(getClass().getResource("/com/xlogant/image/slogantLupa.gif")))); // NOI18N

        jLabel13.setForeground(new java.awt.Color(51, 51, 255));
        jLabel13.setText("# Rfid._>");

        NumRadio.setBackground(new java.awt.Color(255, 255, 255));
        migrupo.add(NumRadio);
        NumRadio.setForeground(new java.awt.Color(0, 0, 204));
        NumRadio.setText("# Empleado");

        Numrfid.setBackground(new java.awt.Color(255, 255, 255));
        migrupo.add(Numrfid);
        Numrfid.setForeground(new java.awt.Color(0, 0, 204));
        Numrfid.setText("# Rfid");

        jLabel14.setForeground(new java.awt.Color(0, 0, 204));
        jLabel14.setText("Seleccionar lectora: ");

        miComboRF.setEnabled(false);

        lecturaRF.setText("Conectar");
        lecturaRF.setEnabled(false);

        buscando.setText("Buscar");
        buscando.setEnabled(false);

        miBusqueda.setText("Buscar");
        miBusqueda.setEnabled(false);

        panelHuella.setBackground(new java.awt.Color(255, 255, 255));
        panelHuella.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelHuella.setLayout(new java.awt.GridBagLayout());

        numEmp.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        numEmp.setEnabled(false);

        numref.setEnabled(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setForeground(new java.awt.Color(0, 0, 153));

        jLabel1.setForeground(new java.awt.Color(0, 0, 153));
        jLabel1.setText("Nombre: ");

        textNombrePersona.setDocument(new LimitandorTexto(textNombrePersona,40));
        textNombrePersona.setForeground(new java.awt.Color(51, 51, 255));
        textNombrePersona.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textNombrePersona.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));
        textNombrePersona.setEnabled(false);

        jLabel2.setForeground(new java.awt.Color(0, 0, 153));
        jLabel2.setText("Apellido Paterno: ");

        textApellidoPat.setDocument(new LimitandorTexto(textApellidoPat, 40)
        );
        textApellidoPat.setForeground(new java.awt.Color(51, 51, 255));
        textApellidoPat.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textApellidoPat.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));
        textApellidoPat.setEnabled(false);

        textApellidoMat.setDocument(new LimitandorTexto(textApellidoMat,40));
        textApellidoMat.setForeground(new java.awt.Color(51, 51, 255));
        textApellidoMat.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textApellidoMat.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));
        textApellidoMat.setEnabled(false);

        jLabel3.setForeground(new java.awt.Color(0, 0, 153));
        jLabel3.setText("Apellido Materno: ");

        jLabel4.setBackground(new java.awt.Color(0, 0, 153));
        jLabel4.setForeground(new java.awt.Color(0, 0, 153));
        jLabel4.setText("Dirección: ");

        textDirecPersona.setDocument(new JTextFieldLimit(50,false));
        textDirecPersona.setForeground(new java.awt.Color(51, 51, 255));
        textDirecPersona.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textDirecPersona.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));
        textDirecPersona.setEnabled(false);

        textTelPersona.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));
        textTelPersona.setForeground(new java.awt.Color(51, 51, 255));
        try {
            textTelPersona.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##-##-##-##-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        textTelPersona.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textTelPersona.setEnabled(false);

        jLabel5.setBackground(new java.awt.Color(0, 0, 153));
        jLabel5.setForeground(new java.awt.Color(0, 0, 153));
        jLabel5.setText("Teléfono: ");

        jLabel6.setBackground(new java.awt.Color(0, 0, 153));
        jLabel6.setForeground(new java.awt.Color(0, 0, 153));
        jLabel6.setText("Celular: ");

        TextCelPer.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));
        TextCelPer.setForeground(new java.awt.Color(51, 51, 255));
        try {
            TextCelPer.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(###)##-##-##-##-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        TextCelPer.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        TextCelPer.setEnabled(false);

        textMailpersona.setDocument(new JTextFieldLimit(50, false));
        textMailpersona.setForeground(new java.awt.Color(51, 51, 255));
        textMailpersona.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textMailpersona.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));
        textMailpersona.setEnabled(false);

        jLabel7.setBackground(new java.awt.Color(0, 0, 153));
        jLabel7.setForeground(new java.awt.Color(0, 0, 153));
        jLabel7.setText("email: ");

        jLabel8.setBackground(new java.awt.Color(0, 0, 153));
        jLabel8.setForeground(new java.awt.Color(0, 0, 153));
        jLabel8.setText("Fecha de ingreso: ");

        textoFecha.setForeground(new java.awt.Color(51, 51, 255));
        textoFecha.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textoFecha.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));
        textoFecha.setEnabled(false);

        textNumEmp.setDocument(new JTextFieldLimit(20, true));
        textNumEmp.setForeground(new java.awt.Color(0, 0, 255));
        textNumEmp.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textNumEmp.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));
        textNumEmp.setEnabled(false);

        jLabel9.setBackground(new java.awt.Color(0, 0, 153));
        jLabel9.setForeground(new java.awt.Color(0, 0, 153));
        jLabel9.setText("Número de emp: ");

        jLabel12.setBackground(new java.awt.Color(0, 0, 153));
        jLabel12.setForeground(new java.awt.Color(0, 0, 153));
        jLabel12.setText("Sucursal:");

        textSucursal.setForeground(new java.awt.Color(51, 51, 255));
        textSucursal.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textSucursal.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));
        textSucursal.setEnabled(false);

        jLabel16.setBackground(new java.awt.Color(0, 0, 153));
        jLabel16.setForeground(new java.awt.Color(0, 0, 153));
        jLabel16.setText("Tipo:");

        controlTipo.setEditable(false);
        controlTipo.setBackground(new java.awt.Color(255, 255, 255));
        controlTipo.setForeground(new java.awt.Color(51, 51, 255));
        controlTipo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        controlTipo.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));

        TextoEstado.setForeground(new java.awt.Color(51, 51, 255));
        TextoEstado.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        TextoEstado.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));
        TextoEstado.setEnabled(false);

        jLabel15.setBackground(new java.awt.Color(0, 0, 153));
        jLabel15.setForeground(new java.awt.Color(0, 0, 153));
        jLabel15.setText("Estatus Usuario: ");

        modificaDatosPer.setText("Modifica");
        modificaDatosPer.setEnabled(false);

        jLabel27.setForeground(new java.awt.Color(0, 0, 153));
        jLabel27.setText("Sucursal:");

        tipodePerfil.setForeground(new java.awt.Color(0, 0, 204));
        tipodePerfil.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(0, 0, 102)));
        tipodePerfil.setEnabled(false);

        jLabel29.setForeground(new java.awt.Color(0, 0, 153));
        jLabel29.setText("Estatus usuario:");

        comboSuc.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));
        comboSuc.setEnabled(false);

        comboUs.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));
        comboUs.setEnabled(false);

        jLabel25.setForeground(new java.awt.Color(0, 0, 153));
        jLabel25.setText("Fecha de Ingreso: ");

        campoFecha.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));
        campoFecha.setForeground(new java.awt.Color(51, 51, 255));
        campoFecha.setEnabled(false);
        campoFecha.setFont(new java.awt.Font("Dialog", Font.BOLD, 12)); // NOI18N

        jLabel28.setForeground(new java.awt.Color(0, 0, 153));
        jLabel28.setText("Tipo:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(3, 3, 3)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel1)
                                        .addComponent(jLabel2)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel8)
                                                .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING))
                                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))
                                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addComponent(jLabel3)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addGap(9, 9, 9)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(jLabel16)
                                                .addComponent(jLabel12))
                                            .addGap(11, 11, 11)))))
                            .addComponent(jLabel15))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textApellidoPat)
                            .addComponent(textApellidoMat)
                            .addComponent(textDirecPersona)
                            .addComponent(textTelPersona)
                            .addComponent(TextCelPer)
                            .addComponent(textMailpersona)
                            .addComponent(textNombrePersona)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(textSucursal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(textoFecha, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                                        .addComponent(textNumEmp)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel25)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                                .addComponent(campoFecha, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(controlTipo)
                                            .addComponent(TextoEstado))
                                        .addGap(76, 76, 76)
                                        .addComponent(jLabel28)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jLabel29)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tipodePerfil, 0, 178, Short.MAX_VALUE)
                                    .addComponent(comboUs, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel27)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(comboSuc, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(modificaDatosPer)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(modificaDatosPer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(textNombrePersona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textApellidoPat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textApellidoMat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textDirecPersona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textTelPersona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TextCelPer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textMailpersona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel8)
                                    .addComponent(textoFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(textNumEmp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel25)
                                    .addComponent(campoFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(7, 7, 7)
                        .addComponent(jLabel2)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textSucursal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(controlTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16))
                        .addGap(4, 4, 4)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15)
                            .addComponent(TextoEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboSuc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel27))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tipodePerfil, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel28))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(comboUs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel22.setForeground(new java.awt.Color(0, 0, 153));
        jLabel22.setText("Nombre de usuario: ");

        jLabel19.setForeground(new java.awt.Color(0, 0, 153));
        jLabel19.setText("Contraseña actual:");

        jLabel20.setForeground(new java.awt.Color(0, 0, 153));
        jLabel20.setText("Nueva contraseña: ");

        jLabel21.setForeground(new java.awt.Color(0, 0, 153));
        jLabel21.setText("Repetir contraseña: ");

        passwdNuevo2.setDocument(new JTextFieldLimit(20, false));
        passwdNuevo2.setForeground(new java.awt.Color(51, 51, 255));
        passwdNuevo2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        passwdNuevo2.setEnabled(false);

        paswdNuevo.setDocument(new JTextFieldLimit(20, false));
        paswdNuevo.setForeground(new java.awt.Color(51, 51, 255));
        paswdNuevo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        paswdNuevo.setEnabled(false);

        passwordOriginal.setDocument(new JTextFieldLimit(20, false));
        passwordOriginal.setForeground(new java.awt.Color(51, 51, 255));
        passwordOriginal.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        passwordOriginal.setEnabled(false);

        nombreUs.setForeground(new java.awt.Color(51, 51, 255));
        nombreUs.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        nombreUs.setEnabled(false);

        checkPass.setBackground(new java.awt.Color(0, 0, 51));
        checkPass.setForeground(new java.awt.Color(255, 255, 255));
        checkPass.setText("Modifica");
        checkPass.setEnabled(false);

        recolecta.setText("Guardar cambios");
        recolecta.setEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel21)
                            .addComponent(jLabel20, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(1, 1, 1)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(passwdNuevo2)
                            .addComponent(passwordOriginal)
                            .addComponent(paswdNuevo)
                            .addComponent(nombreUs)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel22)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkPass, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(recolecta, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(checkPass)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(nombreUs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordOriginal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(paswdNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(passwdNuevo2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(recolecta)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelBlanco2.setBackground(new java.awt.Color(255, 255, 255));
        panelBlanco2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Huella", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.BOTTOM, new java.awt.Font("Segoe UI", Font.PLAIN, 12), new java.awt.Color(0, 0, 153))); // NOI18N
        panelBlanco2.setLayout(new java.awt.BorderLayout());
        panelBlanco2.add(etiHuella, java.awt.BorderLayout.CENTER);

        panelRojo3.setBackground(new java.awt.Color(255, 255, 255));
        panelRojo3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        cambiarHuella.setBackground(new java.awt.Color(255, 0, 0));
        cambiarHuella.setForeground(new java.awt.Color(255, 255, 255));
        cambiarHuella.setText("Modifica");
        cambiarHuella.setEnabled(false);

        progresoHuella.setStringPainted(true);

        capturandoHuella.setText("Iniciar lectura");
        capturandoHuella.setEnabled(false);

        detenerLectura.setText("Cancelar lectura");
        detenerLectura.setEnabled(false);

        jLabel10.setText("Captura Huellas: ");

        capturaHuellas.setText("0");

        anuncio.setText("status");

        javax.swing.GroupLayout panelRojo3Layout = new javax.swing.GroupLayout(panelRojo3);
        panelRojo3.setLayout(panelRojo3Layout);
        panelRojo3Layout.setHorizontalGroup(
            panelRojo3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRojo3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelRojo3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelRojo3Layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(panelRojo3Layout.createSequentialGroup()
                        .addGroup(panelRojo3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(progresoHuella, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelRojo3Layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(capturaHuellas)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cambiarHuella))
                            .addGroup(panelRojo3Layout.createSequentialGroup()
                                .addComponent(capturandoHuella)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(detenerLectura))
                            .addComponent(anuncio, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        panelRojo3Layout.setVerticalGroup(
            panelRojo3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRojo3Layout.createSequentialGroup()
                .addGroup(panelRojo3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cambiarHuella)
                    .addComponent(jLabel10)
                    .addComponent(capturaHuellas))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progresoHuella, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelRojo3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(capturandoHuella)
                    .addComponent(detenerLectura))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(anuncio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(21, 21, 21)
                                        .addComponent(jLabel13)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(numref, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(miBusqueda))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(Numrfid)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel14)
                                        .addGap(3, 3, 3)
                                        .addComponent(miComboRF, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lecturaRF))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(NumRadio)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(numEmp, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buscando))
                            .addComponent(jSeparator1))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelBlanco2, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(panelHuella, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(panelRojo3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(NumRadio)
                                    .addComponent(buscando)
                                    .addComponent(numEmp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel14)
                                    .addComponent(miComboRF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lecturaRF)
                                    .addComponent(Numrfid)))
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(miBusqueda)
                            .addComponent(numref, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(panelHuella, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(panelRojo3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(panelBlanco2, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void estableceInicio() {

        var llenaRoles = ControlCrearUsuario.obtenerRoles();
        numref.setEditable(false);
        numEmp.requestFocus();
        //buscando.setEnabled(false);
        List<String> losPuertos = ControlaPuerto.MuestraPuertos();
        miComboRF.removeAllItems();
        miComboRF.addItem("");
        losPuertos.forEach(r -> miComboRF.addItem(r));

        miComboRF.addActionListener(e -> {
            var combox = (String) miComboRF.getSelectedItem();
            if ("".equals(combox)) {
                showInternalMessageDialog(this, "Seleccione el puerto para lectura", "Monitor", ERROR_MESSAGE);
                miComboRF.setSelectedIndex(1);
                miComboRF.requestFocus();
                lecturaRF.setEnabled(true);
            } else {
                lecturaRF.setEnabled(true);
            }
        });

        NumRadio.addActionListener(e -> {
            var o = e.getSource();
            if (o instanceof JRadioButton) {
                if (e.getSource() == NumRadio) {
                    if (NumRadio.isSelected()) {
                        var valor = LocalDate.now();
                        var ins = valor.atStartOfDay().atZone(ZoneId.systemDefault()).toInstant();
                        var nuevo = Date.from(ins);
                        numEmp.requestFocus();
                        numEmp.setText("");
                        numEmp.setEnabled(true);
                        miComboRF.setSelectedItem(0);
                        miComboRF.setEnabled(false);
                        lecturaRF.setEnabled(false);
                        tipodePerfil.setEnabled(false);
                        numref.setText("");
                        numref.setText("");
                        numref.setEnabled(false);
                        buscando.setEnabled(true);
                        textNombrePersona.setText("");
                        textApellidoPat.setText("");
                        textApellidoMat.setText("");
                        textDirecPersona.setText("");
                        textTelPersona.setValue("");
                        TextCelPer.setValue("");
                        textMailpersona.setText("");
                        textoFecha.setText("");
                        textNumEmp.setText("");
                        textSucursal.setText("");
                        controlTipo.setText("");
                        TextoEstado.setText("");
                        campoFecha.setDate(nuevo);
                        comboSuc.setSelectedIndex(0);
                        tipodePerfil.setSelectedIndex(0);
                        comboUs.setSelectedIndex(0);
                        nombreUs.setText("");
                        passwordOriginal.setText("");
                        paswdNuevo.setText("");
                        passwdNuevo2.setText("");
                        modificaDatosPer.setEnabled(false);
                        checkPass.setEnabled(false);
                        cambiarHuella.setEnabled(false);
                        //panelHuella.removeAll();
                        //panelHuella.repaint();
                        ///Colocar aqui...................

                        //...............................
                        /*if (elPuerto.isOpened()) {
                            EscuchaPuerto.cerrarPuerto(elPuerto);
                        } else {
                            System.out.println("El puerto no esta abierto");
                        }*/
                    } else {
                        var valor = LocalDate.now();
                        var ins = valor.atStartOfDay().atZone(ZoneId.systemDefault()).toInstant();
                        var nuevo = Date.from(ins);
                        numEmp.setText("");
                        numEmp.setText("");
                        numEmp.setEnabled(false);
                        buscando.setEnabled(false);
                        Numrfid.requestFocus();
                        miComboRF.setEnabled(false);
                        buscando.setEnabled(true);
                        tipodePerfil.setEnabled(false);
                        textNombrePersona.setText("");
                        textApellidoPat.setText("");
                        textApellidoMat.setText("");
                        textDirecPersona.setText("");
                        textTelPersona.setValue("");
                        TextCelPer.setValue("");
                        textMailpersona.setText("");
                        textoFecha.setText("");
                        textNumEmp.setText("");
                        textSucursal.setText("");
                        controlTipo.setText("");
                        TextoEstado.setText("");
                        passwordOriginal.setText("");
                        paswdNuevo.setText("");
                        passwdNuevo2.setText("");
                        campoFecha.setDate(nuevo);
                        comboSuc.setSelectedIndex(0);
                        tipodePerfil.setSelectedIndex(0);
                        comboUs.setSelectedIndex(0);
                        modificaDatosPer.setEnabled(false);
                        checkPass.setEnabled(false);
                        cambiarHuella.setEnabled(false);
                        //panelHuella.removeAll();
                        //panelHuella.repaint();
                    }
                }
            }
        });

        Numrfid.addActionListener(e -> {
            var valor = LocalDate.now();
            var ins = valor.atStartOfDay().atZone(ZoneId.systemDefault()).toInstant();
            var nuevo = Date.from(ins);
            var o = e.getSource();
            if (o instanceof JRadioButton) {
                if (e.getSource() == Numrfid) {
                    if (Numrfid.isSelected()) {
                        numEmp.setEnabled(false);
                        buscando.setEnabled(false);
                        numref.setText("");
                        numEmp.setText("");
                        nombreUs.setText("");
                        textNombrePersona.setText("");
                        textApellidoPat.setText("");
                        textApellidoMat.setText("");
                        textDirecPersona.setText("");
                        textTelPersona.setValue("");
                        TextCelPer.setValue("");
                        textMailpersona.setText("");
                        textoFecha.setText("");
                        textNumEmp.setText("");
                        textSucursal.setText("");
                        controlTipo.setText("");
                        TextoEstado.setText("");
                        passwordOriginal.setText("");
                        paswdNuevo.setText("");
                        passwdNuevo2.setText("");
                        campoFecha.setDate(nuevo);
                        comboSuc.setSelectedIndex(0);
                        tipodePerfil.setSelectedIndex(0);
                        comboUs.setSelectedIndex(0);
                        numref.setEnabled(true);
                        miComboRF.requestFocus();
                        miComboRF.setEnabled(true);
                        modificaDatosPer.setEnabled(false);
                        checkPass.setEnabled(false);
                        cambiarHuella.setEnabled(false);
                        //panelHuella.removeAll();
                        //panelHuella.repaint();
                    } else {
                        numref.setText("");
                        numEmp.setText("");
                        nombreUs.setText("");
                        textNombrePersona.setText("");
                        textApellidoPat.setText("");
                        textApellidoMat.setText("");
                        textDirecPersona.setText("");
                        textTelPersona.setValue("");
                        TextCelPer.setValue("");
                        textMailpersona.setText("");
                        textoFecha.setText("");
                        textNumEmp.setText("");
                        textSucursal.setText("");
                        controlTipo.setText("");
                        TextoEstado.setText("");
                        passwordOriginal.setText("");
                        paswdNuevo.setText("");
                        passwdNuevo2.setText("");
                        campoFecha.setDate(nuevo);
                        comboSuc.setSelectedIndex(0);
                        tipodePerfil.setSelectedIndex(0);
                        comboUs.setSelectedIndex(0);
                        numref.setEnabled(false);
                        buscando.setEnabled(false);
                        NumRadio.requestFocus();
                        miComboRF.setEnabled(false);
                        modificaDatosPer.setEnabled(false);
                        checkPass.setEnabled(false);
                        cambiarHuella.setEnabled(false);
                        campoFecha.setEnabled(false);
                        //panelHuella.removeAll();
                        //panelHuella.repaint();
                    }
                }
            }
        });

        numEmp.addActionListener(e -> {
            var campo1 = numEmp.getText().trim();
            if (campo1.isEmpty()) {
                numEmp.setText("");
                showInternalMessageDialog(this, "El campo numero de emp esta vacio", "Monitor", ERROR_MESSAGE);
                buscando.setEnabled(false);
                numEmp.requestFocus();
            } else {
                buscando.setEnabled(true);
                ((JComponent) e.getSource()).transferFocus();
                //botonBusca.requestFocus();
            }
        });

        numref.addActionListener(e -> {
            var campo2 = numref.getText().trim();
            System.out.printf("El número de radiofrecuencia:--------- %5s%n", campo2);
            if (campo2.isEmpty()) {
                numref.setText("");
                showInternalMessageDialog(this, "El campo numero de RFID esta vacio", "Monitor", ERROR_MESSAGE);
                buscando.setEnabled(false);
                numref.requestFocus();
                miComboRF.setEnabled(false);
            } else {
                buscando.setEnabled(true);
                //miComboRF.requestFocus();
                miComboRF.setEnabled(true);
                ((JComponent) e.getSource()).transferFocus();
            }
        });

        miBusqueda.addActionListener(e -> {
            var NUMREF = numref.getText();
            if ("".equals(NUMREF)) {
                showInternalMessageDialog(this, "El campo número de empleado esta vacio", "Monitor", ERROR_MESSAGE);
            } else {
                ResultadoSerialDatos = ControladorDatosUsuario.cargandoDatosPersona(NUMREF);
                numeroDeEntradas = ResultadoSerialDatos.size();
                System.out.println("Numero de registros " + numeroDeEntradas);
                if (numeroDeEntradas != 0) {
                    indiceEntrada = 0;
                    dpersonal = ResultadoSerialDatos.get(indiceEntrada);
                    showInternalMessageDialog(this, "Datos de usuario encontrado", "Monitor", INFORMATION_MESSAGE);
                    textNombrePersona.setText(dpersonal.getNombre());
                    textApellidoPat.setText(dpersonal.getApellidoPat());
                    textApellidoMat.setText(dpersonal.getApellidoMat());
                    textDirecPersona.setText(dpersonal.getDireccion());
                    textTelPersona.setValue(dpersonal.getTelefono());
                    TextCelPer.setValue(dpersonal.getCelular());
                    textMailpersona.setText(dpersonal.getEmail());
                    fecha_ = dpersonal.getFecha();
                    fechaMostrada = fecha_.format(DateTimeFormatter.ISO_LOCAL_DATE);
                    textoFecha.setText(fechaMostrada);
                    textNumEmp.setText(dpersonal.getNumEmp());
                    textSucursal.setText(String.valueOf(dpersonal.getNom_sucursal()));
                    controlTipo.setText(dpersonal.getTpo());
                    System.out.println("Tipo de usuario:--------------> " + dpersonal.getTpo());
                    edos = dpersonal.getEstatus();
                    if (edos) {
                        TextoEstado.setText("ACTIVO");
                    } else {
                        TextoEstado.setText("INACTIVO");
                    }
                    nombreUs.setText(dpersonal.getNuser());
                    modificaDatosPer.setEnabled(true);
                    checkPass.setEnabled(true);
                    cambiarHuella.setEnabled(true);
                    buscando.setEnabled(false);
                    numref.requestFocus();
                    miComboRF.setEnabled(false);
                } else {
                    showInternalMessageDialog(this, "Datos de usuario no encontrado", "Monitor", ERROR_MESSAGE);
                    System.out.println("Esta vacio");
                    numEmp.requestFocus();
                    textNombrePersona.setText("");
                    textApellidoPat.setText("");
                    textApellidoMat.setText("");
                    textDirecPersona.setText("");
                    textTelPersona.setText("");
                    TextCelPer.setText("");
                    textMailpersona.setText("");
                    textoFecha.setText("");
                    textNumEmp.setText("");
                    textSucursal.setText("");
                    TextoEstado.setText("");
                    nombreUs.setText("");
                    nombreUs.setText("");
                    passwordOriginal.setText("");
                    paswdNuevo.setText("");
                    passwdNuevo2.setText("");
                    modificaDatosPer.setEnabled(false);
                    checkPass.setEnabled(false);
                    checkPass.setSelected(false);
                    cambiarHuella.setEnabled(false);
                    //panelHuella.removeAll();
                    //panelHuella.repaint();
                }
            }

            /*if (NUMREF.isEmpty()) {
                numref.setText("Vacio.................................");
                numref.setText("");
                showInternalMessageDialog(this, "El campo numero de RFID esta vacio", "Monitor", ERROR_MESSAGE);
                buscando.setEnabled(false);
                numref.requestFocus();
                miComboRF.setEnabled(false);
            } else {
                ResultadoSerialDatos = ControladorDatosUsuario.cargandoDatosPersona(NUMREF);
                ResultadoSerialDatos.forEach(s -> System.out.println(s.getNombre()));
                showInternalMessageDialog(this, ResultadoSerialDatos.size(), "Monitor", JOptionPane.INFORMATION_MESSAGE);
                buscando.setEnabled(true);
                miComboRF.requestFocus();
                miComboRF.setEnabled(true);
                //((JComponent) e.getSource()).transferFocus();
            }*/
        });

        /* numref.addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                final String NUMREF = numref.getText();
                if (NUMREF.isEmpty()) {
                    numref.setText("");
                    showInternalMessageDialog(null, "El campo numero de RFID esta vacio", "Monitor", ERROR_MESSAGE);
                    buscando.setEnabled(false);
                    numref.requestFocus();
                    miComboRF.setEnabled(false);
                } else {
                    if (numref.isFocusOwner()) {
                        System.out.println("Con valor foco ganado --------------------------------------------------------->>>>>>>>>>>>>>>");
                       ResultadoSerialDatos = ControladorDatosUsuario.cargandoDatosPersona(NUMREF);
                       // System.out.printf("Total de usuarios encontrados.... %d%n", ResultadoSerialDatos);
                        buscando.setEnabled(true);
                        //miComboRF.requestFocus();
                        miComboRF.setEnabled(true);
                    }
                    //((JComponent) e.getSource()).transferFocus();
                }

            }
        });*/
        lecturaRF.addActionListener(e -> PuertoAbierto());

        buscando.addActionListener(e -> {
            var valor = LocalDate.now();
            var ins = valor.atStartOfDay().atZone(ZoneId.systemDefault()).toInstant();
            var nuevo = Date.from(ins);
            var numeroEmpleado = numEmp.getText();
            System.out.println(numeroEmpleado);
            if ("".equals(numeroEmpleado)) {
                showInternalMessageDialog(this, "El campo número de empleado esta vacio", "Monitor", ERROR_MESSAGE);
            } else {
                ResultadoDatos = ControladorDatosUsuario.muestraDatosUsuario(numeroEmpleado);
                numeroDeEntradas = ResultadoDatos.size();
                System.out.println("Numero de registros " + numeroDeEntradas);
                if (numeroDeEntradas != 0) {
                    indiceEntrada = 0;
                    dpersonal = ResultadoDatos.get(indiceEntrada);
                    detecta = dpersonal.getId_control();
                    templates = ValorandoHuellas.ObtieneHuellas(detecta);
                    showInternalMessageDialog(this, "Datos de usuario encontrado", "Monitor", INFORMATION_MESSAGE);
                    System.out.println("Número de identificador: " + detecta);
                    if (templates.isEmpty()) {
                        showInternalMessageDialog(this, "No hay registro de huellas", "Monitor", ERROR_MESSAGE);
                        //cargarRegistroHuella();
                        UpdateUI();
                    } else {
                        showInternalMessageDialog(this, "Huellas encontradas", "Monitor", INFORMATION_MESSAGE);
                        //cargarRegistroHuella();
                        templates.forEach((x1, c) -> {
                            System.out.println("Mostrando dedo: " + x1.toString() + " Plantilla: " + c.toString());
                            showInternalMessageDialog(this, x1.toString(), "Monitor", INFORMATION_MESSAGE);
                        });
                        UpdateUI();
                    }
                    textNombrePersona.setText(dpersonal.getNombre());
                    textApellidoPat.setText(dpersonal.getApellidoPat());
                    textApellidoMat.setText(dpersonal.getApellidoMat());
                    textDirecPersona.setText(dpersonal.getDireccion());
                    textTelPersona.setValue(dpersonal.getTelefono());
                    TextCelPer.setValue(dpersonal.getCelular());
                    textMailpersona.setText(dpersonal.getEmail());
                    fecha_ = dpersonal.getFecha();
                    fechaMostrada = fecha_.format(DateTimeFormatter.ISO_LOCAL_DATE);
                    textoFecha.setText(fechaMostrada);
                    textNumEmp.setText(dpersonal.getNumEmp());
                    textSucursal.setText(String.valueOf(dpersonal.getNom_sucursal()));
                    controlTipo.setText(dpersonal.getTpo());
                    edos = dpersonal.getEstatus();
                    if (edos) {
                        TextoEstado.setText("ACTIVO");
                    } else {
                        TextoEstado.setText("INACTIVO");
                    }
                    nombreUs.setText(dpersonal.getNuser());
                    modificaDatosPer.setEnabled(true);
                    checkPass.setEnabled(true);
                    cambiarHuella.setEnabled(true);
                    campoFecha.setDate(nuevo);
                    textoFecha.setEditable(false);
                    textSucursal.setEditable(false);
                    controlTipo.setEditable(false);
                    controlTipo.setEnabled(false);
                    TextoEstado.setEditable(false);
                } else {
                    showInternalMessageDialog(this, "Datos de usuario no encontrado", "Monitor", ERROR_MESSAGE);
                    System.out.println("Esta vacio");
                    numEmp.requestFocus();
                    textNombrePersona.setText("");
                    textApellidoPat.setText("");
                    textApellidoMat.setText("");
                    textDirecPersona.setText("");
                    textTelPersona.setText("");
                    TextCelPer.setText("");
                    textMailpersona.setText("");
                    textoFecha.setText("");
                    textNumEmp.setText("");
                    textSucursal.setText("");
                    TextoEstado.setText("");
                    nombreUs.setText("");
                    nombreUs.setText("");
                    passwordOriginal.setText("");
                    paswdNuevo.setText("");
                    passwdNuevo2.setText("");
                    controlTipo.setText("");
                    checkPass.setEnabled(false);
                    checkPass.setSelected(false);
                    cambiarHuella.setEnabled(false);
                    modificaDatosPer.setSelected(false);
                    modificaDatosPer.setEnabled(false);
                    // CambiaDatosOff.setEnabled(false);
                }
            }
        });

        ///Cargando sucursal
        final var listaSucursalesAct = ControlCrearUsuario.listaSucursales(CentroPrincipal.IDEMPRE);
        comboSuc.removeAllItems();
        comboSuc.addItem("");
        comboSuc.repaint();
        listaSucursalesAct
                .entrySet()
                .stream()
                .sorted(Map.Entry.comparingByKey())
                .forEachOrdered(x -> {
                    System.out.println(x.getKey());
                    comboSuc.addItem(x.getKey());
                });

        ///Cargando el tipo de perfil en el combobox
        tipodePerfil.removeAllItems();
        tipodePerfil.addItem("");
        llenaRoles
                .entrySet()
                .stream()
                .filter(x -> !x.getKey().contains("Super Admin"))
                .sorted(Map.Entry.comparingByKey())
                .forEachOrdered(x -> {
                    System.out.println(x.getKey());
                    var usuarios = x.getKey();
                    tipodePerfil.addItem(usuarios);
                });

        ///Estatus de usuario de combobox
        var usuarioActivo = new LinkedHashMap<String, Boolean>();
        usuarioActivo.put("Activo", true);
        usuarioActivo.put("Inactivo", false);
        comboUs.removeAllItems();
        comboUs.addItem("");
        usuarioActivo
                .forEach((x, z) -> comboUs.addItem(x));

        modificaDatosPer.addActionListener(e -> {
            var o = e.getSource();
            if (o instanceof JCheckBox) {
                if (e.getSource() == modificaDatosPer) {
                    if (modificaDatosPer.isSelected()) {
                        var per = textNombrePersona.getText();
                        var apaPat = textApellidoPat.getText();
                        var apaMat = textApellidoMat.getText();
                        var dire = textDirecPersona.getText();
                        var tel = (String) textTelPersona.getValue();
                        var cel = (String) TextCelPer.getValue();
                        var mail = textMailpersona.getText();
                        var fe = textoFecha.getText();
                        var nemp = textNumEmp.getText();
                        var suc = textSucursal.getText();
                        var edo = TextoEstado.getText();
                        if ("".equals(per) && "".equals(apaPat) && "".equals(apaMat)
                                && "".equals(dire) && "".equals(tel) && "".equals(cel)
                                && "".equals(mail) && "".equals(fe) && "".equals(nemp)
                                && "".equals(suc) && "".equals(edo)) {
                            textNombrePersona.setEnabled(false);
                            textApellidoPat.setEnabled(false);
                            textApellidoMat.setEnabled(false);
                            textDirecPersona.setEnabled(false);
                            textTelPersona.setEnabled(false);
                            TextCelPer.setEnabled(false);
                            textMailpersona.setEnabled(false);
                            textoFecha.setEnabled(false);
                            textNumEmp.setEnabled(false);
                            textSucursal.setEnabled(false);
                            TextoEstado.setEnabled(false);
                            paswdNuevo.setText("");
                            paswdNuevo.setEnabled(false);
                            passwdNuevo2.setText("");
                            passwdNuevo2.setEnabled(false);
                            campoFecha.setEnabled(true);
                            comboSuc.setEnabled(false);
                            modificaDatosPer.setEnabled(false);
                            tipodePerfil.setEnabled(false);
                            comboUs.setEnabled(false);
                        } else {
                            textNombrePersona.requestFocus();
                            textNombrePersona.setEnabled(true);
                            textApellidoPat.setEnabled(true);
                            textApellidoMat.setEnabled(true);
                            textDirecPersona.setEnabled(true);
                            textTelPersona.setEnabled(true);
                            TextCelPer.setEnabled(true);
                            textMailpersona.setEnabled(true);
                            textoFecha.setEnabled(true);
                            textNumEmp.setEnabled(true);
                            textSucursal.setEnabled(true);
                            TextoEstado.setEnabled(true);
                            campoFecha.setEnabled(true);
                            comboSuc.setEnabled(true);
                            modificaDatosPer.setEnabled(true);
                            tipodePerfil.setEnabled(true);
                            comboUs.setEnabled(true);
                        }
                    } else {
                        textNombrePersona.setEnabled(false);
                        textApellidoPat.setEnabled(false);
                        textApellidoMat.setEnabled(false);
                        textDirecPersona.setEnabled(false);
                        textTelPersona.setEnabled(false);
                        TextCelPer.setEnabled(false);
                        textMailpersona.setEnabled(false);
                        textoFecha.setEnabled(false);
                        textNumEmp.setEnabled(false);
                        textSucursal.setEnabled(false);
                        TextoEstado.setEnabled(false);
                        paswdNuevo.setText("");
                        paswdNuevo.setEnabled(false);
                        passwdNuevo2.setText("");
                        passwdNuevo2.setEnabled(false);
                        modificaDatosPer.setEnabled(false);
                        campoFecha.setEnabled(false);
                        comboSuc.setEnabled(false);
                        tipodePerfil.setEnabled(false);
                        comboUs.setEnabled(false);
                    }
                }
            }
        });

        checkPass.addActionListener(e -> {
            var n = nombreUs.getText();
            var o = e.getSource();
            if (o instanceof JCheckBox) {
                if (e.getSource() == checkPass) {
                    if (checkPass.isSelected()) {
                        if ("".equals(n)) {
                            nombreUs.setEnabled(false);
                            passwordOriginal.setEnabled(false);
                            paswdNuevo.setText("");
                            paswdNuevo.setEnabled(false);
                            passwdNuevo2.setText("");
                            passwdNuevo2.setEnabled(false);
                            checkPass.setSelected(false);
                            checkPass.setEnabled(false);
                        } else {
                            nombreUs.setEnabled(false);
                            passwordOriginal.requestFocus();
                            passwordOriginal.setEnabled(true);
                            checkPass.setEnabled(true);
                        }
                    } else {
                        nombreUs.setEnabled(false);
                        passwordOriginal.setEnabled(false);
                        paswdNuevo.setText("");
                        paswdNuevo.setEnabled(false);
                        passwdNuevo2.setText("");
                        passwdNuevo2.setEnabled(false);
                        checkPass.setSelected(false);
                        checkPass.setEnabled(false);
                    }
                }
            }
        });

        passwordOriginal.addActionListener(e -> {
            var nu = nombreUs.getText();
            var pp = new String(passwordOriginal.getPassword());
            var encriptado = EncriptaGenerador.getHash(pp, 5);
            if ("".equals(pp)) {
                showInternalMessageDialog(this, "El campo contraseña está vacío", "Monitor", ERROR_MESSAGE);
                passwordOriginal.requestFocus();
            } else {
                if (ControladorDatosUsuario.claveEnBase(nu, encriptado)) {
                    passwordOriginal.setEditable(false);
                    paswdNuevo.setEnabled(true);
                    paswdNuevo.requestFocus();
                    passwdNuevo2.setEnabled(false);
                    System.out.println("Datos correctos");
                } else {
                    paswdNuevo.setEnabled(false);
                    passwordOriginal.requestFocus();
                    passwdNuevo2.setEnabled(false);
                    showInternalMessageDialog(this, "Contraseña incorrecta...", "Monitor", INFORMATION_MESSAGE);
                    passwordOriginal.setText("");
                    System.out.println("Datos incorrectos");
                }
            }
        });

        paswdNuevo.addActionListener(e -> {
            var np = new String(paswdNuevo.getPassword());
            if ("".equals(np)) {
                showInternalMessageDialog(this, "El campo contraseña nueva está vacío", "Monitor", ERROR_MESSAGE);
                paswdNuevo.requestFocus();
            } else {
                passwdNuevo2.setEnabled(true);
                passwdNuevo2.requestFocus();
            }
        });

        passwdNuevo2.addActionListener(e -> {
            var v1 = new String(paswdNuevo.getPassword());
            var v2 = new String(passwdNuevo2.getPassword());
            if ("".equals(v2)) {
                showInternalMessageDialog(this, "El campo contraseña nueva está vacío", "Monitor", ERROR_MESSAGE);
                passwdNuevo2.requestFocus();
            } else {
                if (!v1.equals(v2)) {
                    showInternalMessageDialog(this, "Las contraseñas no coinciden\nVerifique las contraseñas", "Monitor", ERROR_MESSAGE);
                    paswdNuevo.requestFocus();
                    paswdNuevo.setText("");
                    passwdNuevo2.setText("");
                } else {
                    passwordOriginal.setEnabled(false);
                    paswdNuevo.setEnabled(false);
                    passwdNuevo2.setEnabled(false);
                }
            }
        });

        cambiarHuella.addActionListener(e -> {
            var o = e.getSource();
            if (o instanceof JCheckBox) {
                if (e.getSource().equals(cambiarHuella)) {
                    if (cambiarHuella.isSelected()) {
                        capturandoHuella.setEnabled(true);
                    } else {
                        capturandoHuella.setEnabled(false);
                        detenerLectura.setEnabled(false);
                    }
                }
            }
        });

        /* CambiaDatosOff.addActionListener(e -> {
            var o = e.getSource();
            if (o instanceof JCheckBox) {
                if (e.getSource().equals(CambiaDatosOff)) {
                    if (CambiaDatosOff.isSelected()) {
                        comboSuc.setEnabled(true);
                        comboUs.setEnabled(true);
                        campoFecha.setEnabled(true);
                    } else {
                        comboSuc.setEnabled(false);
                        comboUs.setEnabled(false);
                        campoFecha.setEnabled(false);
                    }
                }
            }
        });*/
        capturandoHuella.addActionListener(e -> {
            capturandoHuella.setEnabled(false);
            detenerLectura.setEnabled(false);
            if (!Lector.isStarted()) {
                System.out.println("Se a inciado el lector ---------->>>>>>>>>" + Lector.isStarted());
                Lector.startCapture();
                detenerLectura.setEnabled(false);
                EstadoHuellas();
                progresoHuella.setValue(0);
                progresoHuella.repaint();
                progresoHuella.revalidate();
            }
            var y = Reclutador.getFeaturesNeeded();
            System.out.println("---fffffffff-------> " + y);
        });
    }

    private void PuertoAbierto() {
        System.out.println("Ejecutado......");
        var numPorts = (String) miComboRF.getSelectedItem();
        if (Objects.requireNonNull(numPorts).isEmpty()) {
            showInternalMessageDialog(this, "No ha seleccionado el puerto", "Monitor", ERROR_MESSAGE);
            miComboRF.requestFocus();
            miComboRF.setSelectedIndex(1);
        } else {
            if (!numPorts.isEmpty()) {
                SerialPort elPuerto = EscuchaPuerto.AbrirPuerto(numPorts);
                try {
                    elPuerto.addEventListener(new EscuchaPuerto(numref, lecturaRF, miComboRF), SerialPort.MASK_RXCHAR);
                } catch (SerialPortException ex) {
                    Logger.getLogger(PBYMUsuario.class.getName()).log(Level.SEVERE, null, ex);
                    showInternalMessageDialog(this, ex.getLocalizedMessage(), "Monitor", ERROR_MESSAGE);
                }
            } else {
                showInternalMessageDialog(this, "No ha seleccionado el puerto", "Monitor", ERROR_MESSAGE);
                System.out.println("El puerto no se ha seleccionado");
            }
        }
    }

  /*  private void cargarRegistroHuella() {
        panelHuella.setBorder(BorderFactory.createTitledBorder("Enrolador."));
        Arrays.stream(DPFPFingerIndex.values())
                .forEach(f -> {
                    CasillaVerificacion = new JCheckBox(Utilities.fingerName(f));
                    CasillaVerificacion.setBackground(new Color(255, 255, 255));
                    var gridBagConstraints = new GridBagConstraints();
                    var rows = DPFPFingerIndex.values().length / 2;
                    gridBagConstraints.gridx = f.ordinal() / rows;
                    gridBagConstraints.gridy = rows - 1 - Math.abs(rows - 1 - f.ordinal()) + gridBagConstraints.gridx;
                    gridBagConstraints.anchor = GridBagConstraints.WEST;
                    panelHuella.add(CasillaVerificacion, gridBagConstraints);
                    checkBoxes.put(f, CasillaVerificacion);
                    var dummyFinger = f;
                    CasillaVerificacion.addActionListener(e -> {
                        {
                            elIndice = dummyFinger;
                        }
                        var cb = (JCheckBox) e.getSource();
                        if (cb.isSelected()) {
                            showInternalMessageDialog(PBYMUsuario.this,
                                    "Enrrolador de huellas, click para enrrolar.", "Cargar Huella.",
                                    INFORMATION_MESSAGE);
                            System.out.println(elIndice + "------------------------------------------------>");
                        } else {
                            if (showConfirmDialog(this,
                                    "Are you sure you want to delete the " + Utilities.fingerprintName(elIndice) + "?", "Fingerprint Enrollment",
                                    YES_NO_OPTION) == YES_OPTION) {
                                templates.remove(elIndice);
                            } else {
                                cb.setSelected(true);
                            }
                        }
                        UpdateUI();
                    });
                });
    }*/

   

    private void IniciaTodoelLector() {

        Lector = DPFPGlobal.getCaptureFactory().createCapture();
        Reclutador = DPFPGlobal.getEnrollmentFactory().createEnrollment();
        temp = new EnumMap<>(DPFPFingerIndex.class);
        EnumSet<DPFPFingerIndex> fingers = EnumSet.noneOf(DPFPFingerIndex.class);
        //fingers.addAll(templates.keySet());
        Lector.addDataListener(new DPFPDataAdapter() {
            @Override public void dataAcquired(final DPFPDataEvent e) {
                SwingUtilities.invokeLater(() -> {
                    // EnviarTexto("La Huella Digital ha sido Capturada");
                    anuncio.setText("La Huella Digital ha sido Capturada");
                    anuncio.setForeground(Color.blue);
                    ProcesarCaptura(e.getSample());
                });
            }
        });

        Lector.addReaderStatusListener(new DPFPReaderStatusAdapter() {
            @Override public void readerConnected(final DPFPReaderStatusEvent e) {
                SwingUtilities.invokeLater(() -> {
                    //EnviarTexto("El Sensor de Huella Digital esta Activado o Conectado");
                    anuncio.setText("El Sensor de Huella Digital esta Activado o Conectado");
                    anuncio.setForeground(Color.GREEN);
                });
            }

            @Override
            public void readerDisconnected(final DPFPReaderStatusEvent e) {
                SwingUtilities.invokeLater(() -> {
                    // EnviarTexto("El Sensor de Huella Digital esta Desactivado o no Conectado");
                    anuncio.setText("El Sensor de Huella Digital esta Desactivado o no Conectado");
                    anuncio.setForeground(Color.red);
                });
            }
        });

        Lector.addSensorListener(new DPFPSensorAdapter() {
            @Override
            public void fingerTouched(final DPFPSensorEvent e) {
                SwingUtilities.invokeLater(() -> {
                    //EnviarTexto("El dedo ha sido colocado sobre el Lector de Huella");
                    anuncio.setText("El dedo ha sido colocado sobre el Lector de Huella");
                    anuncio.setForeground(Color.darkGray);
                });
            }

            @Override
            public void fingerGone(final DPFPSensorEvent e) {
                SwingUtilities.invokeLater(() -> {
                    //EnviarTexto("El dedo ha sido quitado del Lector de Huella");
                    anuncio.setText("El dedo ha sido quitado del Lector de Huella");
                    anuncio.setForeground(Color.GRAY);
                });
            }
        });

        Lector.addErrorListener(new DPFPErrorAdapter() {
            public void errorReader(final DPFPErrorEvent e) {
                SwingUtilities.invokeLater(() -> {
                    //EnviarTexto("Error: " + e.getError());
                    anuncio.setText("Error: " + e.getError());
                    anuncio.setForeground(Color.MAGENTA);
                });
            }
        });

       Arrays.stream(DPFPFingerIndex.values())
            .forEach(s -> {
            jCheckBox = new JCheckBox(Utilities.fingerName(s));
            jCheckBox.setBackground(new Color(255, 255, 255));
            var gridBagConstraints = new GridBagConstraints();
            var rows = DPFPFingerIndex.values().length / 2;
            gridBagConstraints.gridx = s.ordinal() / rows;
            gridBagConstraints.gridy = rows - 1 - Math.abs(rows - 1 - s.ordinal()) + gridBagConstraints.gridx;
            gridBagConstraints.anchor = GridBagConstraints.WEST;
            panelHuella.add(jCheckBox, gridBagConstraints);
            checkBoxes.put(s, jCheckBox);
                jCheckBox.addActionListener(e -> {
                {
                    elIndex = s;
                }
                var cb = (JCheckBox) e.getSource();
                if (cb.isSelected()) {
                   capturandoHuella.setEnabled(true);
                   detenerLectura.setEnabled(false);
                   recolecta.setEnabled(false);
                    showInternalMessageDialog(this,
                            "To enroll the finger, click Enroll Fingerprints.", "Fingerprint Enrollment",
                            JOptionPane.INFORMATION_MESSAGE);
                    System.out.println(elIndex + "------------------------------------------------>");
                } else {
                    if (JOptionPane.showConfirmDialog(this,
                            "Are you sure you want to delete the " + Utilities.fingerprintName(elIndex) + "?", "Fingerprint Enrollment",
                            JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                        templates.remove(elIndex);
                    } else {
                        cb.setSelected(true);
                    }
                }
                UpdateUI();
            });
        });
    }
     private void UpdateUI() {
        // update enrolled fingers checkboxes
        Arrays.stream(DPFPFingerIndex.values())
                .forEach(f -> {
                    System.out.println("Hay datos -------------->" + templates.size());
                    checkBoxes.get(f).setSelected(templates.containsKey(f));
                });
    }

    private Image CrearImagenHuella(DPFPSample sample) {
        return DPFPGlobal.getSampleConversionFactory().createImage(sample);
    }

    private void DibujarHuella(Image image) {
        etiHuella.setIcon(new ImageIcon(
                image.getScaledInstance(etiHuella.getWidth(), etiHuella.getHeight(), Image.SCALE_DEFAULT)));
        repaint();
        revalidate();
    }

    private DPFPFeatureSet extraerCaracteristicas(DPFPSample sample, DPFPDataPurpose purpose) {
        var extractor = DPFPGlobal.getFeatureExtractionFactory().createFeatureExtraction();
        try {
            return extractor.createFeatureSet(sample, purpose);
        } catch (DPFPImageQualityException e) {
            System.out.printf("Error al extraer las caracteristicas de la huella:%s%n ", e.getCaptureFeedback());
            return null;
        }
    }

    private void stop() {
        Lector.stopCapture();
        // EnviarTexto("No se está usando el Lector de Huella Dactilar ");
    }

    private DPFPTemplate getTemplate() {
        return template;
    }

    private void setTemplate(DPFPTemplate template) {
        var old = this.template;
        this.template = template;
        firePropertyChange(TEMPLATE_PROPERTY, old, template);
    }

   

    private void ActivaLosBotones() {
        capturandoHuella.addActionListener(e -> {
            capturandoHuella.setEnabled(false);
            detenerLectura.setEnabled(false);
            if (!Lector.isStarted()) {
                Lector.startCapture();
                detenerLectura.setEnabled(false);
                EstadoHuellas();
                progresoHuella.setValue(0);
                progresoHuella.repaint();
                progresoHuella.revalidate();
            }
            var y = Reclutador.getFeaturesNeeded();
            System.out.println("---fffffffff-------> " + y);
        });
        detenerLectura.addActionListener(e -> {
            progresoHuella.setValue(0);
            capturandoHuella.setEnabled(true);
            detenerLectura.setEnabled(false);
            if (Lector.isStarted()) {
                Lector.stopCapture();
                Reclutador.clear();
                etiHuella.setIcon(null);
                EstadoHuellas();
            }
        });
    }

    private void ProcesarCaptura(DPFPSample sample) {
        // Procesar la muestra de la huella y crear un conjunto de características con el propósito de inscripción.
        DPFPFeatureSet featuresinscripcion = extraerCaracteristicas(sample, DPFPDataPurpose.DATA_PURPOSE_ENROLLMENT);
        // Procesar la muestra de la huella y crear un conjunto de características con el propósito de verificacion.
        DPFPFeatureSet featuresverificacion = extraerCaracteristicas(sample, DPFPDataPurpose.DATA_PURPOSE_VERIFICATION);
        // Comprobar la calidad de la muestra de la huella y lo añade a su reclutador si es bueno
        if (featuresinscripcion != null) {
            try {
                System.out.println("Las Caracteristicas de la Huella han sido creada");
                Reclutador.addFeatures(featuresinscripcion);// Agregar las caracteristicas de la huella a la plantilla a crear
                // Dibuja la huella dactilar capturada.
                var image = CrearImagenHuella(sample);
                DibujarHuella(image);
            } catch (DPFPImageQualityException ex) {
                System.err.println("Error: --------> " + ex.getMessage());
                showInternalMessageDialog(this, ex.getLocalizedMessage(), "Monitor", ERROR_MESSAGE);
            } finally {
                EstadoHuellas();
                // Comprueba si la plantilla se ha creado.
                switch (Reclutador.getTemplateStatus()) {
                    case TEMPLATE_STATUS_READY-> {
                        // informe de éxito y detiene  la captura de huellas
                        stop();
                        setTemplate(Reclutador.getTemplate());
                    }
                    case TEMPLATE_STATUS_FAILED-> {
                        // informe de fallas y reiniciar la captura de huellas
                        Reclutador.clear();
                        stop();
                        EstadoHuellas();
                        setTemplate(null);
                        JOptionPane.showMessageDialog(this, "La Plantilla de la Huella no pudo ser creada, Repita el Proceso", "Inscripcion de Huellas Dactilares", JOptionPane.ERROR_MESSAGE);
                        Lector.startCapture();
                    }
                    default-> {
                    }
                }
            }
        }
    }
    
     public void EstadoHuellas() {
        capturaHuellas.setText("Número de huellas: " + Reclutador.getFeaturesNeeded());
        var barra = Reclutador.getFeaturesNeeded();
        System.out.println("----------------------> " + barra);
        switch (barra) {
            case 3-> {
                templates.put(elIndex, Reclutador.getTemplate());
                System.out.println("###################################################_______>" + elIndex);
            }
            case 2-> {
                templates.put(elIndex, Reclutador.getTemplate());
                System.out.println("###################################################_______>" + elIndex);
                progresoHuella.setValue(50);
            }
            case 1-> {
                templates.put(elIndex, Reclutador.getTemplate());
                System.out.println("###################################################_______>" + elIndex);
                progresoHuella.setValue(75);
            }
            case 0-> {
                templates.put(elIndex, Reclutador.getTemplate());
                System.out.println("###################################################_______>" + elIndex);
                progresoHuella.setValue(100);
                Lector.stopCapture();
                Reclutador.clear();
                capturandoHuella.setEnabled(false);
                detenerLectura.setEnabled(true);
                recolecta.setEnabled(true);
            }
            default->
                temp = templates;
        }
    }


    private javax.swing.JRadioButton NumRadio;
    private javax.swing.JRadioButton Numrfid;
    private javax.swing.JFormattedTextField TextCelPer;
    private javax.swing.JTextField TextoEstado;
    private javax.swing.JLabel anuncio;
    private javax.swing.JButton buscando;
    private javax.swing.JCheckBox cambiarHuella;
    private org.jdesktop.swingx.JXDatePicker campoFecha;
    private javax.swing.JLabel capturaHuellas;
    private javax.swing.JButton capturandoHuella;
    private javax.swing.JCheckBox checkPass;
    /*
    private javax.swing.JComboBox comboSuc;
    */
    private javax.swing.JComboBox<String> comboSuc;
    /*
    private javax.swing.JComboBox comboUs;
    */
    private javax.swing.JComboBox<String> comboUs;
    private javax.swing.JTextField controlTipo;
    private javax.swing.JButton detenerLectura;
    private javax.swing.JLabel etiHuella;
    private javax.swing.JButton lecturaRF;
    private javax.swing.JButton miBusqueda;
    /*
    private javax.swing.JComboBox miComboRF;
    */
    private javax.swing.JComboBox<String> miComboRF;
    private javax.swing.JCheckBox modificaDatosPer;
    private javax.swing.JTextField nombreUs;
    private javax.swing.JTextField numEmp;
    private javax.swing.JTextField numref;
    private javax.swing.JPanel panelHuella;
    private javax.swing.JPasswordField passwdNuevo2;
    private javax.swing.JPasswordField passwordOriginal;
    private javax.swing.JPasswordField paswdNuevo;
    private javax.swing.JProgressBar progresoHuella;
    private javax.swing.JButton recolecta;
    private javax.swing.JTextField textApellidoMat;
    private javax.swing.JTextField textApellidoPat;
    private javax.swing.JTextField textDirecPersona;
    private javax.swing.JTextField textMailpersona;
    private javax.swing.JTextField textNombrePersona;
    private javax.swing.JTextField textNumEmp;
    private javax.swing.JTextField textSucursal;
    private javax.swing.JFormattedTextField textTelPersona;
    private javax.swing.JTextField textoFecha;
    private javax.swing.JComboBox<String> tipodePerfil;
    // End of variables declaration//GEN-END:variables

    @Serial
    private static final long serialVersionUID = 8936854497070562847L;
    private DatosPersonal dpersonal;
    private int numeroDeEntradas = 0, totalEntradasBase;
    private int indiceEntrada;
    private ArrayList<DatosPersonal> ResultadoDatos, ResultadoSerialDatos;
    private boolean edos;
    private int tipoUsuarios;
    private String fechaMostrada;
    private LocalDateTime local, fecha_;
    private int detecta = 0;
    private JCheckBox CasillaVerificacion;
    private JCheckBox jCheckBox;
    private DPFPFingerIndex elIndice;
    private DPFPCapture Lector;
    private DPFPEnrollment Reclutador;
    private DPFPFingerIndex elIndex;
    private EnumMap<DPFPFingerIndex, JCheckBox> checkBoxes = new EnumMap<>(DPFPFingerIndex.class);
    private DPFPTemplate template;
    private final static String TEMPLATE_PROPERTY = "template";
    private EnumMap<DPFPFingerIndex, DPFPTemplate> temp;
    private EnumMap<DPFPFingerIndex, DPFPTemplate> templates = new EnumMap<>(DPFPFingerIndex.class);

}
