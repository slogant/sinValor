/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.xlogant.panel;

import com.xlogant.control.texto.JTextFieldLimit;
import com.xlogant.control.texto.LimitadorSoloNumeros;
import com.xlogant.control.texto.LimitandorTexto;
import com.xlogant.controlador.ControlEmpresa;
import com.xlogant.emails.ValidarEmail;
import com.xlogant.filtro.FiltroImagenes;
import java.awt.image.BufferedImage;
import java.io.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFileChooser;

import static com.xlogant.controlador.ControlEmpresa.*;
import static com.xlogant.emails.ValidarEmail.validaEmail;
import static java.awt.Toolkit.getDefaultToolkit;
import static javax.swing.JFileChooser.*;
import static javax.swing.JOptionPane.*;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author oscar
 */
@SuppressWarnings("CallToPrintStackTrace")
public final class panelRepresentante extends javax.swing.JPanel {

    /**
     * Creates new form panelRepresentante
     */
    public panelRepresentante() {
        initComponents();
        foco();
        acciones();
        eventosEmpresa();
        entraEmpresa();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings({"unchecked", "CallToPrintStackTrace"})
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        javax.swing.JPanel jPanel1 = new javax.swing.JPanel();
        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel2 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel3 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel4 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel5 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel6 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel7 = new javax.swing.JLabel();
        textNomRepre = new javax.swing.JTextField();
        textApellidoPat = new javax.swing.JTextField();
        textApellidoMat = new javax.swing.JTextField();
        textCel = new javax.swing.JFormattedTextField();
        texttel = new javax.swing.JFormattedTextField();
        textEmail = new javax.swing.JTextField();
        textDireccion = new javax.swing.JTextField();
        panelFoto = new javax.swing.JPanel();
        limpieza = new javax.swing.JButton();
        siguiente = new javax.swing.JButton();
        muestra = new javax.swing.JButton();
        cargaFoto = new javax.swing.JButton();
        javax.swing.JLabel jLabel8 = new javax.swing.JLabel();
        textPostal = new javax.swing.JTextField();
        javax.swing.JLabel jLabel9 = new javax.swing.JLabel();
        textIFE = new javax.swing.JTextField();
        javax.swing.JLabel jLabel10 = new javax.swing.JLabel();
        textCurp = new javax.swing.JTextField();
        javax.swing.JPanel tab2 = new javax.swing.JPanel();
        atras = new javax.swing.JButton();
        javax.swing.JLabel jLabel11 = new javax.swing.JLabel();
        textRazon = new javax.swing.JTextField();
        javax.swing.JLabel jLabel12 = new javax.swing.JLabel();
        textDomicilio = new javax.swing.JTextField();
        javax.swing.JLabel jLabel13 = new javax.swing.JLabel();
        textCP = new javax.swing.JTextField();
        javax.swing.JLabel jLabel14 = new javax.swing.JLabel();
        textCiudad = new javax.swing.JTextField();
        javax.swing.JLabel jLabel15 = new javax.swing.JLabel();
        textEdo = new javax.swing.JTextField();
        javax.swing.JLabel jLabel16 = new javax.swing.JLabel();
        textTel1 = new javax.swing.JFormattedTextField();
        javax.swing.JLabel jLabel17 = new javax.swing.JLabel();
        textTel2 = new javax.swing.JFormattedTextField();
        javax.swing.JLabel jLabel18 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel19 = new javax.swing.JLabel();
        textWeb = new javax.swing.JTextField();
        javax.swing.JLabel jLabel20 = new javax.swing.JLabel();
        textcorreo = new javax.swing.JTextField();
        javax.swing.JLabel jLabel21 = new javax.swing.JLabel();
        textNss = new javax.swing.JTextField();
        javax.swing.JLabel jLabel22 = new javax.swing.JLabel();
        comboRepre = new javax.swing.JComboBox<>();
        paneldellogo = new javax.swing.JPanel();
        logo = new javax.swing.JButton();
        GuardaEmpresa = new javax.swing.JButton();
        javax.swing.JLabel jLabel23 = new javax.swing.JLabel();
        comboStatusEmp = new javax.swing.JComboBox<>();
        textFax = new javax.swing.JFormattedTextField();
        limpiarLosCampos = new org.jdesktop.swingx.JXHyperlink();

        setBackground(new java.awt.Color(255, 255, 255));

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTabbedPane1.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(0, 0, 204));

        jLabel1.setForeground(new java.awt.Color(0, 0, 204));
        jLabel1.setText("Nombre: ");

        jLabel2.setForeground(new java.awt.Color(0, 0, 204));
        jLabel2.setText("Apellido paterno: ");

        jLabel3.setForeground(new java.awt.Color(0, 0, 204));
        jLabel3.setText("Apellido materno: ");

        jLabel4.setForeground(new java.awt.Color(0, 0, 204));
        jLabel4.setText("Teléfono: ");

        jLabel5.setForeground(new java.awt.Color(0, 0, 204));
        jLabel5.setText("Celular: ");

        jLabel6.setForeground(new java.awt.Color(0, 0, 204));
        jLabel6.setText("email: ");

        jLabel7.setForeground(new java.awt.Color(0, 0, 204));
        jLabel7.setText("Dirección: ");

        textNomRepre.setDocument(new LimitandorTexto(textNomRepre,40));
        textNomRepre.setForeground(new java.awt.Color(51, 51, 255));
        textNomRepre.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textNomRepre.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));

        textApellidoPat.setDocument(new LimitandorTexto(textApellidoPat,40));
        textApellidoPat.setForeground(new java.awt.Color(51, 51, 255));
        textApellidoPat.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textApellidoPat.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));

        textApellidoMat.setDocument(new LimitandorTexto(textApellidoMat,40));
        textApellidoMat.setForeground(new java.awt.Color(51, 51, 255));
        textApellidoMat.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textApellidoMat.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));

        textCel.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));
        textCel.setForeground(new java.awt.Color(51, 51, 255));
        try {
            textCel.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(###)-##-##-##-##-##")));
        } catch (java.text.ParseException ex) {
            //noinspection CallToPrintStackTrace
            ex.printStackTrace();
        }
        textCel.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        texttel.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));
        texttel.setForeground(new java.awt.Color(51, 51, 255));
        try {
            texttel.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##-##-##-##-##")));
        } catch (java.text.ParseException ex) {
            //noinspection CallToPrintStackTrace
            ex.printStackTrace();
        }
        texttel.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        textEmail.setDocument(new JTextFieldLimit(40, false));
        textEmail.setForeground(new java.awt.Color(51, 51, 255));
        textEmail.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textEmail.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));

        textDireccion.setDocument(new JTextFieldLimit(50, false)
        );
        textDireccion.setForeground(new java.awt.Color(51, 51, 255));
        textDireccion.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textDireccion.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));

        panelFoto.setBackground(new java.awt.Color(255, 255, 255));
        panelFoto.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        javax.swing.GroupLayout panelFotoLayout = new javax.swing.GroupLayout(panelFoto);
        panelFoto.setLayout(panelFotoLayout);
        panelFotoLayout.setHorizontalGroup(
            panelFotoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 165, Short.MAX_VALUE)
        );
        panelFotoLayout.setVerticalGroup(
            panelFotoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 212, Short.MAX_VALUE)
        );

        limpieza.setText("Limpiar");

        siguiente.setText("Siguiente >>");
        siguiente.setEnabled(false);

        muestra.setText("Guarda representante");
        muestra.setEnabled(false);

        cargaFoto.setText("foto");
        cargaFoto.setEnabled(false);

        jLabel8.setForeground(new java.awt.Color(0, 0, 204));
        jLabel8.setText("Código postal: ");

        textPostal.setDocument(new LimitadorSoloNumeros(textPostal,5));
        textPostal.setForeground(new java.awt.Color(51, 51, 255));
        textPostal.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textPostal.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));

        jLabel9.setForeground(new java.awt.Color(0, 0, 204));
        jLabel9.setText("Número IFE:");

        textIFE.setDocument(new JTextFieldLimit(48, true)
        );
        textIFE.setForeground(new java.awt.Color(51, 51, 255));
        textIFE.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textIFE.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));

        jLabel10.setForeground(new java.awt.Color(0, 0, 204));
        jLabel10.setText("CURP: ");

        textCurp.setDocument(new JTextFieldLimit(18, true));
        textCurp.setForeground(new java.awt.Color(51, 51, 255));
        textCurp.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textCurp.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel1)
                                        .addComponent(jLabel2)))
                                .addGap(2, 2, 2))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel8))
                                .addGap(4, 4, 4))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel9))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(textCel, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE)
                            .addComponent(textNomRepre)
                            .addComponent(textApellidoPat)
                            .addComponent(textApellidoMat)
                            .addComponent(texttel)
                            .addComponent(textEmail)
                            .addComponent(textDireccion)
                            .addComponent(textPostal)
                            .addComponent(textIFE)
                            .addComponent(textCurp))
                        .addGap(18, 18, 18)
                        .addComponent(panelFoto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(muestra)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(limpieza)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 401, Short.MAX_VALUE)
                        .addComponent(siguiente)
                        .addGap(167, 167, 167))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cargaFoto)
                .addGap(253, 253, 253))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(textNomRepre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(textApellidoPat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(textApellidoMat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(texttel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textCel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(textPostal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(textIFE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textCurp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)))
                    .addComponent(panelFoto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addComponent(cargaFoto)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(muestra)
                    .addComponent(limpieza)
                    .addComponent(siguiente))
                .addGap(21, 21, 21))
        );

        jTabbedPane1.addTab("Datos Representante", jPanel1);

        tab2.setBackground(new java.awt.Color(255, 255, 255));
        tab2.setEnabled(false);

        atras.setText("<< Atrás");

        jLabel11.setBackground(new java.awt.Color(255, 255, 255));
        jLabel11.setForeground(new java.awt.Color(0, 0, 204));
        jLabel11.setText("Nombre razón social: ");

        textRazon.setDocument(new JTextFieldLimit(50, false));
        textRazon.setForeground(new java.awt.Color(51, 51, 255));
        textRazon.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textRazon.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));

        jLabel12.setForeground(new java.awt.Color(0, 0, 204));
        jLabel12.setText("Domicilio fiscal: ");

        textDomicilio.setDocument(new JTextFieldLimit(50, false));
        textDomicilio.setForeground(new java.awt.Color(51, 51, 255));
        textDomicilio.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textDomicilio.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));

        jLabel13.setForeground(new java.awt.Color(0, 0, 204));
        jLabel13.setText("C. P.: ");

        textCP.setDocument(new LimitadorSoloNumeros(textCP,5));
        textCP.setForeground(new java.awt.Color(51, 51, 255));
        textCP.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textCP.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));

        jLabel14.setForeground(new java.awt.Color(0, 0, 204));
        jLabel14.setText("Ciudad: ");

        textCiudad.setDocument(new JTextFieldLimit(30, false));
        textCiudad.setForeground(new java.awt.Color(51, 51, 255));
        textCiudad.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textCiudad.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));

        jLabel15.setForeground(new java.awt.Color(0, 0, 204));
        jLabel15.setText("Estado: ");

        textEdo.setDocument(new JTextFieldLimit(40, false));
        textEdo.setForeground(new java.awt.Color(51, 51, 255));
        textEdo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textEdo.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));

        jLabel16.setForeground(new java.awt.Color(0, 0, 204));
        jLabel16.setText("Teléfono 1: ");

        textTel1.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));
        textTel1.setForeground(new java.awt.Color(51, 51, 255));
        try {
            textTel1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##-##-##-##-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        textTel1.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel17.setForeground(new java.awt.Color(0, 0, 204));
        jLabel17.setText("Teléfono 2: ");

        textTel2.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));
        textTel2.setForeground(new java.awt.Color(51, 51, 255));
        try {
            textTel2.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##-##-##-##-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        textTel2.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel18.setForeground(new java.awt.Color(0, 0, 204));
        jLabel18.setText("fax: ");

        jLabel19.setForeground(new java.awt.Color(0, 0, 204));
        jLabel19.setText("web: ");

        textWeb.setDocument(new JTextFieldLimit(50, false));
        textWeb.setForeground(new java.awt.Color(51, 51, 255));
        textWeb.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textWeb.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));

        jLabel20.setForeground(new java.awt.Color(0, 0, 204));
        jLabel20.setText("email: ");

        textcorreo.setDocument(new JTextFieldLimit(40, false));
        textcorreo.setForeground(new java.awt.Color(51, 51, 255));
        textcorreo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textcorreo.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));

        jLabel21.setForeground(new java.awt.Color(0, 0, 204));
        jLabel21.setText("Registro NNS: ");

        textNss.setDocument(new JTextFieldLimit(24, true));
        textNss.setForeground(new java.awt.Color(51, 51, 255));
        textNss.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textNss.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));

        jLabel22.setForeground(new java.awt.Color(0, 0, 204));
        jLabel22.setText("Reprentante: ");

        comboRepre.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));

        paneldellogo.setBackground(new java.awt.Color(255, 255, 255));
        paneldellogo.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        javax.swing.GroupLayout paneldellogoLayout = new javax.swing.GroupLayout(paneldellogo);
        paneldellogo.setLayout(paneldellogoLayout);
        paneldellogoLayout.setHorizontalGroup(
            paneldellogoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 233, Short.MAX_VALUE)
        );
        paneldellogoLayout.setVerticalGroup(
            paneldellogoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        logo.setMnemonic('L');
        logo.setText("Logo");

        GuardaEmpresa.setMnemonic('e');
        GuardaEmpresa.setText("Guardar empresa");
        GuardaEmpresa.setEnabled(false);

        jLabel23.setForeground(new java.awt.Color(0, 0, 204));
        jLabel23.setText("Estatus empresa: ");

        textFax.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(0, 51, 204)));
        textFax.setForeground(new java.awt.Color(51, 51, 255));
        try {
            textFax.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(##)##-############")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        textFax.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        limpiarLosCampos.setText("Limpiar campos");

        javax.swing.GroupLayout tab2Layout = new javax.swing.GroupLayout(tab2);
        tab2.setLayout(tab2Layout);
        tab2Layout.setHorizontalGroup(
            tab2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab2Layout.createSequentialGroup()
                .addGroup(tab2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tab2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(tab2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(tab2Layout.createSequentialGroup()
                                .addGroup(tab2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel13)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel14)
                                    .addComponent(jLabel15)
                                    .addComponent(jLabel17)
                                    .addComponent(jLabel16)
                                    .addComponent(jLabel20)
                                    .addComponent(jLabel18)
                                    .addComponent(jLabel19))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(tab2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(textEdo)
                                    .addComponent(textRazon)
                                    .addComponent(textDomicilio)
                                    .addComponent(textCP)
                                    .addComponent(textCiudad)
                                    .addComponent(textTel1)
                                    .addComponent(textTel2)
                                    .addComponent(textWeb)
                                    .addComponent(textcorreo)
                                    .addComponent(textFax, javax.swing.GroupLayout.DEFAULT_SIZE, 505, Short.MAX_VALUE)))
                            .addGroup(tab2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tab2Layout.createSequentialGroup()
                                    .addComponent(jLabel21)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(textNss, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(tab2Layout.createSequentialGroup()
                                    .addGroup(tab2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel22)
                                        .addComponent(jLabel23))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(tab2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(comboStatusEmp, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(comboRepre, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(45, 45, 45))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE))
                    .addGroup(tab2Layout.createSequentialGroup()
                        .addComponent(atras)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(limpiarLosCampos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(tab2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(paneldellogo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(tab2Layout.createSequentialGroup()
                        .addComponent(GuardaEmpresa)
                        .addGap(32, 32, 32)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tab2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(logo)
                .addGap(93, 93, 93))
        );
        tab2Layout.setVerticalGroup(
            tab2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tab2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tab2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(tab2Layout.createSequentialGroup()
                        .addGroup(tab2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(textRazon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(tab2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(textDomicilio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(tab2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textCP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(tab2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(textCiudad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(tab2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textEdo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(tab2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textTel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(tab2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textTel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel17))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(tab2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel18)
                            .addComponent(textFax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(tab2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textWeb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel19))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(tab2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textcorreo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel20))
                        .addGap(7, 7, 7)
                        .addGroup(tab2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel21)
                            .addComponent(textNss, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(tab2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboRepre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel22))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(tab2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(comboStatusEmp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel23)))
                    .addComponent(paneldellogo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tab2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tab2Layout.createSequentialGroup()
                        .addComponent(logo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(tab2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(GuardaEmpresa)
                            .addComponent(limpiarLosCampos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tab2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(atras))))
        );

        jTabbedPane1.addTab("Datos empresa", tab2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
    }// </editor-fold>//GEN-END:initComponents
    private void foco() {
        jTabbedPane1.setEnabledAt(1, false);
        siguiente.setEnabled(false);
        textNomRepre.requestFocus();
    }

    private void acciones() {

        textNomRepre.addActionListener(e -> {
            var nombreRepresentante = textNomRepre.getText();
            if ("".equals(nombreRepresentante)) {
                showInternalMessageDialog(this, "Monitor", "Llene todos los campos", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                textNomRepre.requestFocus();
            } else {
                ((JComponent) e.getSource()).transferFocus();
            }
        });
        textApellidoPat.addActionListener(e -> {
            var apellidoPatRepre = textApellidoPat.getText();
            if ("".equals(apellidoPatRepre)) {
                showInternalMessageDialog(this, "Monitor", "Llene todos los campos", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                textApellidoPat.requestFocus();
            } else {
                ((JComponent) e.getSource()).transferFocus();
            }
        });
        textApellidoMat.addActionListener(e -> {
            var apellidoMatRepre = textApellidoMat.getText();
            if ("".equals(apellidoMatRepre)) {
                showInternalMessageDialog(this, "Monitor", "Llene todos los campos", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                textApellidoMat.requestFocus();
            } else {
                ((JComponent) e.getSource()).transferFocus();
            }
        });
        textCel.addActionListener(e -> ((JComponent) e.getSource()).transferFocus());
        texttel.addActionListener(e -> ((JComponent) e.getSource()).transferFocus());
        textEmail.addActionListener(e -> {
            var emailDato = textEmail.getText();
            if ("".equals(emailDato)) {
                showInternalMessageDialog(this, "Monitor", "Llene todos los campos", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                textEmail.requestFocus();
            } else if (!emailDato.equals("")) {
                if (validaEmail(emailDato)) {
                    ((JComponent) e.getSource()).transferFocus();
                } else {
                    showInternalMessageDialog(this, "Error en correo electronico", "Monitor", ERROR_MESSAGE);
                    textEmail.requestFocus();
                    textEmail.setText("");
                }
            }
        });
        textDireccion.addActionListener(e -> {
            var direccion = textDireccion.getText();
            if ("".equals(direccion)) {
                showInternalMessageDialog(this, "El campo dirección esta vacío", "Monitor", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                textDireccion.requestFocus();
            } else {
                //cargaFoto.setEnabled(true);
                ((JComponent) e.getSource()).transferFocus();

            }
        });
        textPostal.addActionListener(e -> {
            var codigoPostal = textPostal.getText().trim();
            if ("".equals(codigoPostal)) {
                showInternalMessageDialog(this, "El campo código postal esta vacío", "Monitor", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                textPostal.requestFocus();
            } else if (codigoPostal.length() < 5) {
                showInternalMessageDialog(this, "Código postal erroeno", "Monitor", ERROR_MESSAGE);
                textPostal.requestFocus();
            } else {
                ((JComponent) e.getSource()).transferFocus();
            }
        });
        textIFE.addActionListener(e -> {
            var ife = textIFE.getText().trim();
            if ("".equals(ife)) {
                showInternalMessageDialog(this, "El campo IFE esta vacío", "Monitor", ERROR_MESSAGE);
                getDefaultToolkit().beep();
            } else if (ife.length() < 48) {
                showInternalMessageDialog(this, "Cantidad de digitos erroneo", "Monitor", ERROR_MESSAGE);
                textIFE.requestFocus();
            } else {
                ((JComponent) e.getSource()).transferFocus();
            }
        });

        textCurp.addActionListener(e -> {
            var curp = textCurp.getText().trim();
            if ("".equals(curp)) {
                showInternalMessageDialog(this, "El campo curp esta vacío", "Monitor", ERROR_MESSAGE);
                textCurp.requestFocus();
            } else if (curp.length() < 18) {
                showInternalMessageDialog(this, "Número de digitos erroneo\nEl curp debe de contener 18 dígitos", "Monitor", ERROR_MESSAGE);
                textCurp.requestFocus();
            } else {
                cargaFoto.setEnabled(true);
                ((JComponent) e.getSource()).transferFocus();
            }
        });

        limpieza.addActionListener(e -> {
            textNomRepre.setText("");
            textApellidoPat.setText("");
            textApellidoMat.setText("");
            texttel.setValue("");
            textCel.setValue("");
            textEmail.setText("");
            textDireccion.setText("");
            textPostal.setText("");
            textIFE.setText("");
            textCurp.setText("");
            panelFoto.removeAll();
            panelFoto.repaint();
            panelFoto.revalidate();
            jTabbedPane1.setEnabledAt(1, false);
            siguiente.setEnabled(false);
            textNomRepre.requestFocus();
        });

        cargaFoto.addActionListener(e -> valorarDatos());

        muestra.addActionListener(e -> {
            establecerDatos();
            var nombreRepresentante = textNomRepre.getText();
            var apellidoPatRepre = textApellidoPat.getText();
            var apellidoMatRepre = textApellidoMat.getText();
            var capturaTel = (String) texttel.getValue();
            var capturaCel = (String) textCel.getValue();
            var emailDato = textEmail.getText().trim();
            var direccion = textDireccion.getText();
            var codigoPostal = textPostal.getText().trim();
            var ife = textIFE.getText().trim();
            var curp = textCurp.getText().trim();
            var laimagen = elPanel.devuelveImagen();
            final boolean guardado = guardaRepresentante(nombreRepresentante, apellidoPatRepre,
                    apellidoMatRepre, capturaTel, capturaCel, emailDato, direccion, laimagen, codigoPostal, ife, curp);
            textNomRepre.setEnabled(false);
            textApellidoPat.setEnabled(false);
            textApellidoMat.setEnabled(false);
            texttel.setEnabled(false);
            textCel.setEnabled(false);
            textEmail.setEnabled(false);
            textDireccion.setEnabled(false);
            textPostal.setEnabled(false);
            textIFE.setEnabled(false);
            textCurp.setEnabled(false);
            panelFoto.setEnabled(false);
            elPanel.setEnabled(false);
            muestra.setEnabled(false);
            limpieza.setEnabled(false);
            cargaFoto.setEnabled(false);
            showInternalMessageDialog(this, "Datos guardados correctamente: " + guardado, "Monitor", INFORMATION_MESSAGE);
        });

        siguiente.addActionListener(e -> jTabbedPane1.setSelectedIndex(1));

        atras.addActionListener(e -> jTabbedPane1.setSelectedIndex(0));
    }

    private void establecerDatos() {
        var nombreRepresentante = textNomRepre.getText();
        var apellidoPatRepre = textApellidoPat.getText();
        var apellidoMatRepre = textApellidoMat.getText();
        var capturaTel = (String) texttel.getValue();
        var capturaCel = (String) textCel.getValue();
        var emailDato = textEmail.getText();
        var direccion = textDireccion.getText();
        var codigoPostal = textPostal.getText().trim();
        var ife = textIFE.getText().trim();
        var curp = textCurp.getText().trim();
        if (nombreRepresentante.equals("")) {
            showInternalMessageDialog(this, "Monitor", "Llene todos los campos", ERROR_MESSAGE);
            textNomRepre.requestFocus();
        } else if (apellidoPatRepre.equals("")) {
            showInternalMessageDialog(this, "Monitor", "Llene todos los campos", ERROR_MESSAGE);
            textApellidoPat.requestFocus();
        } else if (apellidoMatRepre.equals("")) {
            showInternalMessageDialog(this, "Monitor", "Llene todos los campos", ERROR_MESSAGE);
            textApellidoMat.requestFocus();
        } else if (emailDato.equals("")) {
            showInternalMessageDialog(this, "Monitor", "Llene todos los campos", ERROR_MESSAGE);
            textEmail.requestFocus();
        } else if (validaEmail(emailDato)) {
            System.out.println("Campo validado");
            if (direccion.equals("")) {
                showInternalMessageDialog(this, "Monitor", "Llene todos los campos", ERROR_MESSAGE);
                textDireccion.requestFocus();
            } else if ("".equals(codigoPostal)) {
                showInternalMessageDialog(this, "El campo código postal esta vacío", "Monitor", ERROR_MESSAGE);
                textPostal.requestFocus();
            } else if ("".equals(ife)) {
                showInternalMessageDialog(this, "El campo IFE esta vacío", "Monitor", ERROR_MESSAGE);
                textIFE.requestFocus();
            } else if ("".equals(curp)) {
                showInternalMessageDialog(this, "El campo curp esta vacío", "Monitor", ERROR_MESSAGE);
                textCurp.requestFocus();
            } else if (elPanel == null) {
                showInternalMessageDialog(this, "Monitor", "No hay foto", ERROR_MESSAGE);
                cargaFoto.requestFocus();
                siguiente.setEnabled(false);
                jTabbedPane1.setEnabledAt(1, false);
            } else {
                if (ctrlDatos()) {
                    showInternalMessageDialog(this, "Monitor", "todo activado...................", ERROR_MESSAGE);
                    siguiente.setEnabled(true);
                }
            }
        } else {
            showInternalMessageDialog(this, "Monitor", "Correo electronico erroneo", ERROR_MESSAGE);
            textEmail.setText("");
            textEmail.requestFocus();
        }
    }

    private void eventosEmpresa() {

        textRazon.addActionListener(e -> {
            var razoSocial = textRazon.getText();
            if ("".equals(razoSocial)) {
                showInternalMessageDialog(this, "Monitor", "El campo razón social esta vacío", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                textRazon.requestFocus();
            } else {
                ((JComponent) e.getSource()).transferFocus();
            }
        });

        textDomicilio.addActionListener(e -> {
            var domicilio = textDomicilio.getText();
            if ("".equals(domicilio)) {
                showInternalMessageDialog(this, "Monitor", "El campo razón social esta vacío", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                textDomicilio.requestFocus();
            } else {
                ((JComponent) e.getSource()).transferFocus();
            }
        });

        textCP.addActionListener(e -> {
            var codigoP = textCP.getText().trim();
            if ("".equals(codigoP)) {
                showInternalMessageDialog(this, "El campo código postal esta vacío", "Monitor", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                textCP.requestFocus();
            } else if (codigoP.length() < 5) {
                showInternalMessageDialog(this, "Código postal erroeno", "Monitor", ERROR_MESSAGE);
                textCP.requestFocus();
            } else {
                ((JComponent) e.getSource()).transferFocus();
            }
        });

        textCiudad.addActionListener(e -> {
            var ciudad = textCiudad.getText();
            if ("".equals(ciudad)) {
                showInternalMessageDialog(this, "El campo ciudad esta vacío", "Monitor", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                textCiudad.requestFocus();
            } else {
                ((JComponent) e.getSource()).transferFocus();
            }
        });

        textEdo.addActionListener(e -> {
            var edo = textEdo.getText();
            if ("".equals(edo)) {
                showInternalMessageDialog(this, "El campo esdo esta vacío", "Monitor", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                textEdo.requestFocus();
            } else {
                ((JComponent) e.getSource()).transferFocus();
            }
        });

        textTel1.addActionListener(e -> ((JComponent) e.getSource()).transferFocus());

        textTel2.addActionListener(e -> ((JComponent) e.getSource()).transferFocus());

        textFax.addActionListener(e -> {
            var fax = textFax.getText();
            if ("".equals(fax)) {
                showInternalMessageDialog(this, "El campo fax esta vacío", "Monitor", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                textFax.requestFocus();
            } else {
                ((JComponent) e.getSource()).transferFocus();
            }
        });

        textWeb.addActionListener(e -> {
            var web = textWeb.getText();
            if ("".equals(web)) {
                showInternalMessageDialog(this, "El campo de página web esta vacío", "Monitor", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                textWeb.requestFocus();
            } else {
                ((JComponent) e.getSource()).transferFocus();
            }
        });

        textcorreo.addActionListener(e -> {
            var emailDato = textcorreo.getText();
            if ("".equals(emailDato)) {
                showInternalMessageDialog(this, "Monitor", "Llene el campo correo", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                textcorreo.requestFocus();
            } else if (!emailDato.equals("")) {
                if (validaEmail(emailDato)) {
                    ((JComponent) e.getSource()).transferFocus();
                } else {
                    showInternalMessageDialog(this, "Error en correo electronico", "Monitor", ERROR_MESSAGE);
                    textEmail.requestFocus();
                    textEmail.setText("");
                }
            }

        });

        textNss.addActionListener(e -> {
            var nss = textNss.getText();
            if ("".equals(nss)) {
                showInternalMessageDialog(this, "Llene el campo Número de seguridad Social de la empresa", "Monitor", ERROR_MESSAGE);
                getDefaultToolkit().beep();
                textNss.requestFocus();
            } else {
                ((JComponent) e.getSource()).transferFocus();
            }
        });

        comboRepre.addActionListener(e -> ((JComponent) e.getSource()).transferFocus());

        comboStatusEmp.addActionListener(e -> {
            var compara = (String) comboStatusEmp.getSelectedItem();
            final boolean valor;
            switch (Objects.requireNonNull(compara)) {
                case "Activo" -> {
                    showInternalMessageDialog(this, "Activo", "Monitor", ERROR_MESSAGE);
                    getDefaultToolkit().beep();
                    ((JComponent) e.getSource()).transferFocus();
                }
                case "Inactivo" -> {
                    showInternalMessageDialog(this, "Inactivo", "Monitor", ERROR_MESSAGE);
                    getDefaultToolkit().beep();
                    ((JComponent) e.getSource()).transferFocus();
                }
                default -> ((JComponent) e.getSource()).transferFocus();

            }
        });

        limpiarLosCampos.addActionListener(e -> {
            textRazon.setText("");
            textDomicilio.setText("");
            textCP.setText("");
            textCiudad.setText("");
            textEdo.setText("");
            textTel1.setText("");
            textTel2.setText("");
            textFax.setText("");
            textWeb.setText("");
            textcorreo.setText("");
            textNss.setText("");
            comboRepre.setSelectedIndex(0);
            comboStatusEmp.setSelectedIndex(0);
            paneldellogo.removeAll();
            paneldellogo.revalidate();
            paneldellogo.repaint();
            textRazon.requestFocus();
        });
    }

    private void valorarDatos() {
        var selector = new JFileChooser();
        var filtro = new ArrayList<FiltroImagenes>();
        filtro.add(new FiltroImagenes(".jpg", "Imágenes jpg"));
        filtro.add(new FiltroImagenes(".jpeg", "Imágenes jpeg"));
        filtro.add(new FiltroImagenes(".png", "Imágenes png"));
        filtro.add(new FiltroImagenes(".gif", "Imágenes gif"));
        filtro.add(new FiltroImagenes(".bmp", "Imágenes bmp"));
        filtro.forEach((xc) -> selector.addChoosableFileFilter((FileFilter) xc));
        var seleccionado = selector.showOpenDialog(this);
        if (seleccionado == APPROVE_OPTION) {
            try {
                var file = selector.getSelectedFile();
                selector.setCurrentDirectory(file);
                //La imagen del panel la almacene en un BufferedImage
                var imagen = ImageIO.read(file);
                //Cree una clase para almcenar la imagen y así poder cortarla
                elPanel = new PanelControlaImagen(imagen);
                panelFoto.removeAll();
                panelFoto.add(elPanel);
                panelFoto.repaint();
                panelFoto.revalidate();
                if (elPanel != null) {
                    if (ctrlDatos()) {
                        showInternalMessageDialog(this, "Monitor", "todo activado...................", ERROR_MESSAGE);
                        muestra.setEnabled(true);
                        muestra.requestFocus();
                    }
                } else {
                    siguiente.setEnabled(false);
                }
            } catch (IOException ex) {
                Logger.getLogger(panelRepresentante.class.getName()).log(Level.SEVERE, null, ex);
                System.err.println(ex.getLocalizedMessage());
                showInternalMessageDialog(this, ex.getLocalizedMessage(), "Error", WARNING_MESSAGE);
            }
        }
    }

    private boolean ctrlDatos() {
        var nombreRepresentante = textNomRepre.getText();
        var apellidoPatRepre = textApellidoPat.getText();
        var apellidoMatRepre = textApellidoMat.getText();
        var capturaTel = (String) texttel.getValue();
        var capturaCel = (String) textCel.getValue();
        var emailDato = textEmail.getText();
        var direccion = textDireccion.getText();
        if (nombreRepresentante.equals("")) {
            showInternalMessageDialog(this, "Monitor", "Llene todos los campos", ERROR_MESSAGE);
            textNomRepre.requestFocus();
        } else if (apellidoPatRepre.equals("")) {
            showInternalMessageDialog(this, "Monitor", "Llene todos los campos", ERROR_MESSAGE);
            textApellidoPat.requestFocus();
        } else if (apellidoMatRepre.equals("")) {
            showInternalMessageDialog(this, "Monitor", "Llene todos los campos", ERROR_MESSAGE);
            textApellidoMat.requestFocus();
        } else if (emailDato.equals("")) {
            showInternalMessageDialog(this, "Monitor", "Llene todos los campos", ERROR_MESSAGE);
            textEmail.requestFocus();
        } else if (validaEmail(emailDato)) {
            System.out.println("Campo validado");
            if (direccion.equals("")) {
                showInternalMessageDialog(this, "Monitor", "Llene todos los campos", ERROR_MESSAGE);
                textDireccion.requestFocus();
            } else if (elPanel == null) {
                showInternalMessageDialog(this, "Monitor", "No hay foto", ERROR_MESSAGE);
                cargaFoto.requestFocus();
                siguiente.setEnabled(false);
                jTabbedPane1.setEnabledAt(1, false);
            } else {
                return true;
            }
        } else {
            showInternalMessageDialog(this, "Monitor", "Correo electronico erroneo", ERROR_MESSAGE);
            textEmail.setText("");
            textEmail.requestFocus();
            return false;
        }
        return false;
    }

    private void entraEmpresa() {

        var mapa = new HashMap<String, Boolean>();
        mapa.put("Activo", true);
        mapa.put("Inactivo", false);
        comboStatusEmp.removeAllItems();
        comboStatusEmp.addItem("");
        mapa.forEach((valor, verdad) -> comboStatusEmp.addItem(valor));

        var repre = mostrarRepre();
        comboRepre.removeAllItems();
        comboRepre.addItem("");
        repre.forEach((d, f) -> {
            comboRepre.addItem(d);
        });

        logo.addActionListener(e -> {
            var Selector = new JFileChooser();
            var elfiltro = new LinkedList<FiltroImagenes>();
            elfiltro.add(new FiltroImagenes(".jpg", "Imágenes jpg"));
            elfiltro.add(new FiltroImagenes(".jpeg", "Imágenes jpeg"));
            elfiltro.add(new FiltroImagenes(".png", "Imágenes png"));
            elfiltro.add(new FiltroImagenes(".gif", "Imágenes gif"));
            elfiltro.add(new FiltroImagenes(".bmp", "Imágenes bmp"));
            elfiltro.forEach((se) -> Selector.addChoosableFileFilter((FileFilter) se));
            var selec = Selector.showOpenDialog(this);
            if (selec == APPROVE_OPTION) {
                try {
                    archivo = Selector.getSelectedFile();
                    Selector.setCurrentDirectory(archivo);
                    //La imagen del panel la almacene en un BufferedImage
                    var ima = ImageIO.read(archivo);
                    //Cree una clase para almcenar la imagen y así poder cortarla
                    PanelLogoActivo = new PanelControlLogo(ima);
                    paneldellogo.removeAll();
                    paneldellogo.add(PanelLogoActivo);
                    paneldellogo.repaint();
                    paneldellogo.revalidate();
                    if (PanelLogoActivo != null) {
                        if (validaDatosEmpresa()) {
                            showInternalMessageDialog(this, "Monitor", "todo activado...................", ERROR_MESSAGE);
                            GuardaEmpresa.setEnabled(true);
                            GuardaEmpresa.requestFocus();
                        }
                    } else {
                        GuardaEmpresa.setEnabled(false);
                    }
                } catch (IOException ex) {
                    Logger.getLogger(panelRepresentante.class.getName()).log(Level.SEVERE, null, ex);
                    System.err.println(ex.getLocalizedMessage());
                    showInternalMessageDialog(this, ex.getLocalizedMessage(), "Error", WARNING_MESSAGE);
                }
            }
        });

        GuardaEmpresa.addActionListener(e -> {
            validaDatosEmp();
            final var razonSo = textRazon.getText();
            final var domicilios = textDomicilio.getText();
            final var cps = textCP.getText();
            final var cds = textCiudad.getText();
            final var edos = textEdo.getText();
            final var tel1s = (String) textTel1.getValue();
            final var tel2s = (String) textTel2.getValue();
            final var faxs = (String) textFax.getValue();
            final var webs = textWeb.getText();
            final var mails = textcorreo.getText().trim();
            final var nsss = textNss.getText();
            final var laima = PanelLogoActivo.devuelveImagenes();
            final int idrepre = repre.get(comboRepre.getItemAt(comboRepre.getSelectedIndex()));
            final var empresasEstado = mapa.get(comboStatusEmp.getItemAt(comboStatusEmp.getSelectedIndex()));
            final var correcto = guardarEmpresa(razonSo, domicilios, cps, edos, tel1s,
                    tel2s, faxs, webs, mails, nsss, laima, idrepre, cds);
            if (correcto) {
                System.out.println(correcto);
                laima.flush();
                final int indentificador = devuelveIDEmpresa(idrepre);
                if (indentificador != 0) {
                    final boolean guardado = controlaEmpresa(indentificador, empresasEstado);
                    if (guardado) {
                        showInternalMessageDialog(this, "Datos guardados correctamente " + guardado, "Error", INFORMATION_MESSAGE);
                        todoInactivo();
                    } else {
                        showInternalMessageDialog(this, "Datos no guardados " + guardado, "Error", WARNING_MESSAGE);
                    }
                } else {
                    showInternalMessageDialog(this, indentificador, "Error", WARNING_MESSAGE);
                }
            } else {
                showInternalMessageDialog(this, "No se pudo guardar los datos de la empresa " + correcto, "Error", WARNING_MESSAGE);
                System.out.println(correcto);
            }
        });
    }

    private void validaDatosEmp() {
        var razon = textRazon.getText();
        var domicilio = textDomicilio.getText();
        var cp = textCP.getText();
        var cd = textCiudad.getText();
        var edo = textEdo.getText();
        var tel1 = (String) textTel1.getValue();
        var tel2 = (String) textTel2.getValue();
        var fax = (String) textFax.getValue();
        var web = textWeb.getText();
        var mail = textcorreo.getText().trim();
        var nss = textNss.getText();
        var representante = (String) comboRepre.getSelectedItem();
        var valores = (String) comboStatusEmp.getSelectedItem();
        if ("".equals(razon)) {
            showInternalMessageDialog(this, "El campo razón esta vacío", "Monitor", ERROR_MESSAGE);
            textRazon.requestFocus();
        } else if ("".equals(domicilio)) {
            showInternalMessageDialog(this, "El campo domicilio esta vacío", "Monitor", ERROR_MESSAGE);
            textDomicilio.requestFocus();
        } else if ("".equals(cp)) {
            showInternalMessageDialog(this, "El campo código postal esta vacío", "Monitor", ERROR_MESSAGE);
            textCP.requestFocus();
        } else if ("".equals(cd)) {
            showInternalMessageDialog(this, "El campo ciudad esta vacío", "Monitor", ERROR_MESSAGE);
            textCiudad.requestFocus();
        } else if ("".equals(edo)) {
            showInternalMessageDialog(this, "El campo estado esta vacío", "Monitor", ERROR_MESSAGE);
            textEdo.requestFocus();
        } else if ("".equals(web)) {
            showInternalMessageDialog(this, "El campo web esta vacío", "Monitor", ERROR_MESSAGE);
            textWeb.requestFocus();
        } else if ("".equals(mail)) {
            showInternalMessageDialog(this, "El campo email esta vacío", "Monitor", ERROR_MESSAGE);
            textcorreo.requestFocus();
        } else if ("".equals(nss)) {
            showInternalMessageDialog(this, "El campo web nss vacío", "Monitor", ERROR_MESSAGE);
            textNss.requestFocus();
        } else if ("".equals(representante)) {
            showInternalMessageDialog(this, "Seleccione un representante", "Monitor", ERROR_MESSAGE);
            comboRepre.requestFocus();
        } else if ("".equals(valores)) {
            showInternalMessageDialog(this, "Seleccione un representante", "Monitor", ERROR_MESSAGE);
            comboRepre.requestFocus();
        } else if (PanelLogoActivo == null) {
            showInternalMessageDialog(this, "Monitor", "No se ha seleccionado el logo de la empresa", ERROR_MESSAGE);
            logo.requestFocus();
        } else if (validaDatosEmpresa()) {
            showInternalMessageDialog(this, "Monitor", "todo activado...................", ERROR_MESSAGE);
        }
    }

    private boolean validaDatosEmpresa() {
        final var razon = textRazon.getText();
        final var domicilio = textDomicilio.getText();
        final var cp = textCP.getText();
        final var cd = textCiudad.getText();
        final var edo = textEdo.getText();
        final var tel1 = (String) textTel1.getValue();
        final var tel2 = (String) textTel2.getValue();
        final var fax = (String) textFax.getValue();
        final var web = textWeb.getText();
        final var mail = textcorreo.getText().trim();
        final var nss = textNss.getText();
        final var representante = (String) comboRepre.getSelectedItem();
        final var valores = (String) comboStatusEmp.getSelectedItem();
        if ("".equals(razon)) {
            showInternalMessageDialog(this, "El campo razón esta vacío", "Monitor", ERROR_MESSAGE);
            textRazon.requestFocus();
        } else if ("".equals(domicilio)) {
            showInternalMessageDialog(this, "El campo domicilio esta vacío", "Monitor", ERROR_MESSAGE);
            textDomicilio.requestFocus();
        } else if ("".equals(cp)) {
            showInternalMessageDialog(this, "El campo código postal esta vacío", "Monitor", ERROR_MESSAGE);
            textCP.requestFocus();
        } else if ("".equals(edo)) {
            showInternalMessageDialog(this, "El campo estado esta vacío", "Monitor", ERROR_MESSAGE);
            textEdo.requestFocus();
        } else if ("".equals(web)) {
            showInternalMessageDialog(this, "El campo web esta vacío", "Monitor", ERROR_MESSAGE);
            textWeb.requestFocus();
        } else if ("".equals(mail)) {
            showInternalMessageDialog(this, "El campo email esta vacío", "Monitor", ERROR_MESSAGE);
            textcorreo.requestFocus();
        } else if ("".equals(nss)) {
            showInternalMessageDialog(this, "El campo web nss vacío", "Monitor", ERROR_MESSAGE);
            textNss.requestFocus();
        } else if ("".equals(representante)) {
            showInternalMessageDialog(this, "Seleccione un representante", "Monitor", ERROR_MESSAGE);
            comboRepre.requestFocus();
        } else if ("".equals(valores)) {
            showInternalMessageDialog(this, "Seleccione un representante", "Monitor", ERROR_MESSAGE);
            comboRepre.requestFocus();
        } else if (PanelLogoActivo == null) {
            showInternalMessageDialog(this, "Monitor", "No se ha seleccionado el logo de la empresa", ERROR_MESSAGE);
            logo.requestFocus();
        } else {
            return true;
        }
        return false;
    }

    private void todoInactivo() {
        textRazon.setEnabled(false);
        textRazon.setEditable(false);
        textDomicilio.setEnabled(false);
        textDomicilio.setEditable(false);
        textCP.setEditable(false);
        textCP.setEditable(false);
        textCiudad.setEnabled(false);
        textCiudad.setEditable(false);
        textCiudad.setEnabled(false);
        textCiudad.setEditable(false);
        textTel1.setEditable(false);
        textTel1.setEnabled(false);
        textTel2.setEditable(false);
        textTel2.setEnabled(false);
        textFax.setEditable(false);
        textFax.setEnabled(false);
        textWeb.setEnabled(false);
        textWeb.setEditable(false);
        textcorreo.setEnabled(false);
        textcorreo.setEditable(false);
        textNss.setEnabled(false);
        textNss.setEditable(false);
        comboRepre.setEnabled(false);
        comboStatusEmp.setEnabled(false);
        logo.setEnabled(false);
        GuardaEmpresa.setEnabled(false);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton GuardaEmpresa;
    private javax.swing.JButton atras;
    private javax.swing.JButton cargaFoto;
    /*
    private javax.swing.JComboBox comboRepre;
    */
    private JComboBox<String> comboRepre;
    /*
    private javax.swing.JComboBox comboStatusEmp;
    */
    private JComboBox<String> comboStatusEmp;
    private javax.swing.JTabbedPane jTabbedPane1;
    private org.jdesktop.swingx.JXHyperlink limpiarLosCampos;
    private javax.swing.JButton limpieza;
    private javax.swing.JButton logo;
    private javax.swing.JButton muestra;
    public static javax.swing.JPanel panelFoto;
    public static javax.swing.JPanel paneldellogo;
    private javax.swing.JButton siguiente;
    private javax.swing.JTextField textApellidoMat;
    private javax.swing.JTextField textApellidoPat;
    private javax.swing.JTextField textCP;
    private javax.swing.JFormattedTextField textCel;
    private javax.swing.JTextField textCiudad;
    private javax.swing.JTextField textCurp;
    private javax.swing.JTextField textDireccion;
    private javax.swing.JTextField textDomicilio;
    private javax.swing.JTextField textEdo;
    private javax.swing.JTextField textEmail;
    private javax.swing.JFormattedTextField textFax;
    private javax.swing.JTextField textIFE;
    private javax.swing.JTextField textNomRepre;
    private javax.swing.JTextField textNss;
    private javax.swing.JTextField textPostal;
    private javax.swing.JTextField textRazon;
    private javax.swing.JFormattedTextField textTel1;
    private javax.swing.JFormattedTextField textTel2;
    private javax.swing.JTextField textWeb;
    private javax.swing.JTextField textcorreo;
    private javax.swing.JFormattedTextField texttel;
    // End of variables declaration//GEN-END:variables

    private File archivo;
    private PanelControlaImagen elPanel;
    private PanelControlLogo PanelLogoActivo;
    private static BufferedImage imagenLogo;
    private static ByteArrayOutputStream byatos;
    private static ByteArrayInputStream inputStream;
    @Serial
    private static final long serialVersionUID = -6740536481172011657L;
}
